#!/bin/bash

export LD_LIBRARY_PATH="/usr/lib/kicad/lib/x86_64-linux-gnu/:${LD_LIBRARY_PATH}"
export PYTHONPATH="${PYTHONPATH}:/usr/lib/kicad/lib/python3/dist-packages/"

# kicad-cli on macOS (to avoid using shitty clickclick)
export PATH=/Applications/KiCad/KiCad.app/Contents/MacOS/:${PATH}

# Kicad 5 files will be ploted with plotgitcsch
# FORCE_PLOTTING_GRAPHICALLY env variable forces it to be ploted graphically
# Set it with before runing Kiri with
# export FORCE_PLOTTING_GRAPHICALLY=1

# shellcheck disable=SC2155 # Disable declare and assign separately

if [[ -n "${SUPER_DEBUG}" ]]; then
	PS4='$(printf "%d)" ${LINENO}) | '
	set -x
fi

if [[ -n "${SUPER_DEBUG_EXIT_ON_ERROR}" ]]; then
	PS4='$(printf "%d)" ${LINENO}) | '
	set -xe
fi

insert_commits_html()
{
	# GIT COMMITS FORMAT
	# local   | 2021-01-22 17:21:39 | Leandro Heck | Local changes
	# fcd81ef | 2021-01-22 17:21:39 | Leandro Heck | Initial version
	# d20b900 | 2021-01-22 16:59:29 | Leandro Heck | Initial commit

	local html_path="${1}"
	local commit1_i="${2}"
	local commit2_i="${3}"

	local commit_html
	local commits_html

	local empty_img='<span class="iconify" style="padding-left: 0px; padding-right: 0px; width: 14px; height: 14px; color: #ff0000;" data-inline="false"; data-icon="bx:bx-x"></span>'
	local   sch_img='<span class="iconify" style="padding-left: 0px; padding-right: 0px; width: 14px; height: 14px; color: #A6E22E;" data-inline="false"; data-icon="carbon:schematics"></span>'
	local   pcb_img='<span class="iconify" style="padding-left: 0px; padding-right: 0px; width: 14px; height: 14px; color: #F92672;" data-inline="false"; data-icon="codicon:circuit-board"></span>'
	local   txt_img='<span class="iconify" style="padding-left: 0px; padding-right: 0px; width: 14px; height: 14px; color: #888888;" data-inline="false"; data-icon="bi:file-earmark-text"></span>'

	local i=0
	IFS=$'\n'
	for commit in ${COMMITS}; do

		local hash=$(echo "${commit}" | cut -d'|' -f1 | sed "s/^ //g" | sed "s/[ t]\+//g" )
		local date=$(echo "${commit}" | cut -d'|' -f2 | cut -d' ' -f1-2 | sed "s/^ //g" )
		local user=$(echo "${commit}" | cut -d'|' -f3 | sed "s/^ //g" )
		local text=$(echo "${commit}" | cut -d'|' -f4 | sed "s/^ //g" )

		local kicad_pro=$(get_kicad_pro "${OUTPUT_DIR_PATH}/${hash}")
		local kicad_pro_extension=$(get_file_extension "${kicad_pro}")
		local kicad_proj_name=$(get_file_without_extention "${kicad_pro}")
		local kicad_sch=$(get_kicad_sch "${KICAD_PROJ_ABSOLUTE_PATH}" "${kicad_proj_name}" "${kicad_pro_extension}")
		local kicad_pcb=$(get_kicad_pcb "${KICAD_PROJ_ABSOLUTE_PATH}" "${kicad_proj_name}")
		local kicad_sch_pages=$(get_kicad_sch_pages "${KICAD_PROJ_ABSOLUTE_PATH}/${kicad_sch}")
		local kicad_cache_lib=$(get_kicad_cache_lib "${KICAD_PROJ_ABSOLUTE_PATH}" "${kicad_proj_name}")
		# show_project_files "${OUTPUT_DIR_PATH}/${hash}" "${kicad_pro}" "${kicad_sch}" "${kicad_pcb}" "${kicad_cache_lib}"

		if [[ "${hash}" != "_local_" ]]; then

			local path_to_git_root="$(realpath --relative-to="${KICAD_PROJ_ABSOLUTE_PATH}" "${REPO_ABSOLUTE_PATH}")"

			# Check for changes in ".sch|.kicad_sch" files
			if git log --name-only --pretty='format:' -1 -U "${hash}" -- "${path_to_git_root}/${KICAD_PROJ_NESTED_PATH}" | cat | grep -q -s -E "${kicad_sch// /|}${kicad_sch_pages}"; then
				sch_icon="${sch_img}"
			else
				sch_icon="${empty_img}"
			fi

			# Check for changes in .kicad_pcb files
			if git log --name-only --pretty='format:' -1 -U "${hash}" -- "${path_to_git_root}/${KICAD_PROJ_NESTED_PATH}" | cat | grep -q -s "${kicad_pcb}"; then
				pcb_icon="${pcb_img}"
			else
				pcb_icon="${empty_img}"
			fi

			# Check for changes in textual files only
			if git log --name-only --pretty='format:' -1 -U "${hash}" -- "${path_to_git_root}/${KICAD_PROJ_NESTED_PATH}" | cat | grep -q -s -vE "${kicad_sch// /|}${kicad_sch_pages}${kicad_pcb}"; then
				txt_icon="${txt_img}"
			else
				txt_icon="${empty_img}"
			fi

			hash_label="${hash}"
			class="text-info"

		else

			# Check for changes in ".sch|.kicad_sch" files
			if git status -uno  | grep -q -s -E "${kicad_pro}${kicad_sch// /|}${kicad_pcb}${kicad_sch_pages}"; then
				sch_icon="${sch_img}"
			else
				sch_icon="${empty_img}"
			fi

			# Check for changes in .kicad_pcb files
			if git status -uno  | grep -q -s -E "${kicad_pcb}"; then
				pcb_icon="${pcb_img}"
			else
				pcb_icon="${empty_img}"
			fi

			# Check for changes in textual files only
			if git status -uno  | grep -q -s -vE "${kicad_pro}${kicad_sch// /|}${kicad_pcb}${kicad_sch_pages}"; then
				txt_icon="${txt_img}"
			else
				txt_icon="${empty_img}"
			fi

			hash_label="${hash}"
			class="text-warning"
		fi

		i=$((i + 1))

		html_new_line="&#013;"
		tooltip="<div>Commit: ${hash}</br>Date: ${date}</br>Author: ${user}</br>Description:</br>${text}</div>"

		read -r -d '' commit_html <<-EOM
		<!-- Commit ${i} -->
		<input class="chkGroup" type="checkbox" id="${hash}" name="commit" value="${hash}" onchange="update_commits()">
		<label class="text-sm-left list-group-item" style="display: block; width: 445px; margin-left: 0px;" for="${hash}">
		    <table data-toggle="tooltip" title="${tooltip}">
		        <tr>
		            <td rowspan=2 style="vertical-align: top; width: 1.8em;">
		                <svg viewBox="0 0 15 15" fill="none" xmlns="http://www.w3.org/2000/svg" width="15" height="15">
		                    <path d="M7.5 10.5a3 3 0 010-6m0 6a3 3 0 000-6m0 6V15m0-10.5V0" stroke="currentColor"></path>
		                </svg>
		            </td>
		            <td style="white-space:nowrap; overflow: hidden; text-overflow: ellipsis;">
		                <span class="text-muted"> $(printf "%02d" ${i}) | </span> <span class="text-success font-weight-normal">${hash_label}</span> <span class="text-muted"> | </span> ${sch_icon} ${pcb_icon} ${txt_icon} <span class="text-muted font-weight-normal"> | ${date} | ${user}</span>
		            </td>
		        </tr>
		        <tr>
		            <td>
		                <em class="${class}" style=" line-height: 0.7;">${text}</em>
		            </td>
		        </tr>
		    </table>
		</label>
		EOM

		commits_html="${commits_html}${commit_html}\n"

	done

	indent=$(printf '\t%.0s' {1..8})

	# shellcheck disable=SC2086,SC2001
	commits_html="$(echo -e "${commits_html}" | sed "s|^|${indent}|g" | sed "s|@|-|g" | tee "${OUTPUT_DIR_PATH}/commits.html")"

	line_no=$(($(grep -n "FILL_COMMITS_HERE" "${html_path}" | cut -d":" -f1) + 1))
	sed -i "${line_no} e cat \"${OUTPUT_DIR_PATH}/commits.html\"" "${html_path}"
}

insert_pages_html()
{
	local html_path="${1}"
	local commit_hash_1="${2}"
	local commit_hash_2="${3}"

	local page_html
	local pages_html

	local pages=$(cat "${OUTPUT_DIR_PATH}/sch_sheets")
	local pages_to_skip

	local i=0
	IFS=$'\n'
	for page in ${pages}; do

		local page_name=$(echo "${page}" | cut -d'|' -f1 | sed "s/^[ \t]\+//g" | sed "s/[ \t]\+$//g")
		local page_filename_path=$(echo "${page}" | cut -d'|' -f2 | sed "s/^[ \t]\+//g" | sed "s/[ \t]\+$//g")
		local page_filename=$(echo "${page_filename_path}" | xargs -d '\n' basename)

		if echo -e "${pages_to_skip}" | grep -s "${page_filename_path}" > /dev/null; then
			continue
		else
			pages_to_skip="${pages_to_skip}\n${page_filename_path}"
		fi

		if [[ "${i}" == "0" ]]; then
			checked='checked="checked"'
		else
			checked=""
		fi

		i=$((i + 1))

		# IFS=
		read -r -d '' page_html <<-EOM
		<!-- Page ${i} -->
		<input id="${page_name}" data-toggle="tooltip" title="${page_filename_path}" type="radio" value="${page_filename}" name="pages" ${checked} onchange="change_page()">
		<label for="${page_name}" data-toggle="tooltip" title="${page_filename_path}" id="label-${page_name}" class="rounded text-sm-left list-group-item radio-box" onclick="change_page_onclick()" style="white-space: nowrap; overflow: hidden; text-overflow: ellipsis;">
		    <span data-toggle="tooltip" title="${page_filename_path}" style="margin-left:0.5em; margin-right:0.1em;" class="iconify" data-icon="gridicons:pages" data-inline="false"></span>
		    ${page_name}
		</label>
		EOM

		pages_html="${pages_html}${page_html}\n"

	done

	indent=$(printf '\t%.0s' {1..11})

	# shellcheck disable=SC2086,SC2001
	pages_html="$(echo -e "${pages_html}" | sed "s|^|${indent}|g" | sed "s|@|-|g" | tee "${OUTPUT_DIR_PATH}/pages.html")"

	line_no=$(($(grep -n "FILL_PAGES_HERE" "${html_path}" | cut -d":" -f1) + 1))
	sed -i "${line_no} e cat \"${OUTPUT_DIR_PATH}/pages.html\"" "${html_path}"
}

create_unified_sheets_list()
{
	# Remove duplicates keeping the order
	local sheets=$(find "${OUTPUT_DIR_PATH}" -mindepth 3 -maxdepth 3 -name "sch_sheets" -exec cat -n {} \; | sort -k2 -k1n | sort -u -t"|" -k1,1 | uniq -f1 | sort -nk1,1 | cut -f2-)
	echo -e "${sheets}" | sed '/^$/d' | tee "${OUTPUT_DIR_PATH}/sch_sheets"
}

create_unified_layers_list()
{
	local layers=$(find "${OUTPUT_DIR_PATH}" -mindepth 3 -maxdepth 3 -name "pcb_layers" -exec cat {} \; | sort -u -t"|" -k1,1)
	echo -e "${layers}" | sed '/^$/d' | tee "${OUTPUT_DIR_PATH}/pcb_layers"
}

get_layer_color()
{
	local layer_id="${1}"

	# Layer IDs

	     F_Cu=0
	   In1_Cu=1
	   In2_Cu=2
	   In3_Cu=3
	   In4_Cu=4
	     B_Cu=31
	  B_Adhes=32
	  F_Adhes=33
	  B_Paste=34
	  F_Paste=35
	  B_SilkS=36
	  F_SilkS=37
	   B_Mask=38
	   F_Mask=39
	Dwgs_User=40
	Cmts_User=41
	Eco1_User=42
	Eco2_User=43
	Edge_Cuts=44
	   Margin=45
	  B_CrtYd=46
	  F_CrtYd=47
	    B_Fab=48
	    F_Fab=49

	case "${layer_id}" in
		"${B_Adhes}")    layer_color="#3545A8" ;;
		"${B_CrtYd}")    layer_color="#D3D04B" ;;
		"${B_Cu}")       layer_color="#359632" ;;
		"${B_Fab}")      layer_color="#858585" ;;
		"${B_Mask}")     layer_color="#943197" ;;
		"${B_Paste}")    layer_color="#969696" ;;
		"${B_SilkS}")    layer_color="#481649" ;;
		"${Cmts_User}")  layer_color="#7AC0F4" ;;
		"${Dwgs_User}")  layer_color="#0364D3" ;;
		"${Eco1_User}")  layer_color="#008500" ;;
		"${Eco2_User}")  layer_color="#008500" ;;
		"${Edge_Cuts}")  layer_color="#C9C83B" ;;
		"${F_Adhes}")    layer_color="#A74AA8" ;;
		"${F_CrtYd}")    layer_color="#A7A7A7" ;;
		"${F_Cu}")       layer_color="#952927" ;;
		"${F_Fab}")      layer_color="#C2C200" ;;
		"${F_Mask}")     layer_color="#943197" ;;
		"${F_Paste}")    layer_color="#3DC9C9" ;;
		"${F_SilkS}")    layer_color="#339697" ;;
		"${In1_Cu}")     layer_color="#C2C200" ;;
		"${In2_Cu}")     layer_color="#C200C2" ;;
		"${In3_Cu}")     layer_color="#C20000" ;;
		"${In4_Cu}")     layer_color="#0000C2" ;;
		"${Margin}")     layer_color="#D357D2" ;;
		*)               layer_color="" ;;
	esac

	echo "${layer_color}"
}

insert_layers_html()
{
	local html_path="${1}"

	local layer
	local layers

	local checked

	local layer_html
	local layers_html

	local layers=$(cat "${OUTPUT_DIR_PATH}/pcb_layers")

	i=0
	IFS=$'\n'
	for layer in ${layers}; do

		local layer_id=$(echo "${layer}" | cut -d "|" -f1)
		local layer_id_padding=$(printf "%02d" "${layer_id}")
		local layer_name=$(echo "${layer}" | cut -d "|" -f2 | sed "s/\./_/g")
		local layer_color=$(get_layer_color "${layer_id}")

		if [[ "${i}" == "0" ]]; then
			checked="checked='checked'"
		else
			checked=""
		fi

		i=$((i + 1))

		read -r -d '' layer_html <<-EOM
		<!-- Layer ${i} -->
		<input  id="layer-${layer_id_padding}" value="layer-${layer_name}" type="radio" name="layers" onchange="change_layer()" ${checked}>
		<label for="layer-${layer_id_padding}" id="label-layer-${layer_id_padding}" data-toggle="tooltip" title="${layer_id}, ${layer_name}" class="rounded text-sm-left list-group-item radio-box" onclick="change_layer_onclick()">
		    <span style="margin-left:0.5em; margin-right:0.1em; color: ${layer_color}" class="iconify" data-icon="teenyicons-square-solid" data-inline="false"></span>
		    ${layer_name}
		</label>
		EOM

		layers_html="${layers_html}${layer_html}\n"

	done

	indent=$(printf '\t%.0s' {1..11})

	# shellcheck disable=SC2086,SC2001
	layers_html="$(echo -e "${layers_html}" | sed "s|^|${indent}|g" | sed "s|@|-|g" | tee "${OUTPUT_DIR_PATH}/layers.html")"

	line_no=$(($(grep -n "FILL_LAYERS_HERE" "${html_path}" | cut -d":" -f1) + 1))
	sed -i "${line_no} e cat \"${OUTPUT_DIR_PATH}/layers.html\"" "${html_path}"
}

# ==========================================================================================
# ==========================================================================================
# ==========================================================================================
# ==========================================================================================
#
# NEW OR ORGANIZED CODE
#
# ==========================================================================================
# ==========================================================================================
# ==========================================================================================
# ==========================================================================================

# GLOBAL VARIABLES
export KIRI_PID
export KIRI_LAUNCH_PATH="$(realpath "$(pwd)")"
export KIRI_HOME_PATH
export KICAD_VESION
export KICAD_PRO_ABSOLUTE_PATH
export REPO_ABSOLUTE_PATH
export KICAD_PROJ_ABSOLUTE_PATH
export KICAD_PROJ_NAME
export OUTPUT_DIR_PATH
export WEB_DIR_PATH
export COMMITS

# GLOBAL FLAGS WITH DEFAULT OPTIONS
export ALL_COMMITS=0
export ARCHIVE_PROJECT=0
export DEBUG=0
export DEBUG_KIDIFF=0
export DEBUG_PLOTGITSCH=0
export DRY_RUN=0
export LAUNCH_BROWSER=1
export PAGE_FRAME=1
export REMOVE_KIRI_FOLDER=0
export SELECT_LASTEST_N_COMMITS
export SKIP_CACHE_LIB=0
export START_ON_LAYOUT_VIEW=0
export START_SERVER=1
export VERBOSE=0
export SKIP_KICAD_6=0
export KICAD_PRO_FIND_EXCLUDE_PATTERN="#"

export NEWEST_COMMIT
export OLDEST_COMMIT
export WEBSERVER_PORT
export PLOTGITSCH_MISSING
export KIDIFF_MISSING

if [[ -z ${FORCE_PLOTTING_GRAPHICALLY} ]]; then
	export FORCE_PLOTTING_GRAPHICALLY=0
fi

# RAW COLORS
readonly RCO=$(printf "\e[0m")  # Reset COlors
readonly BTE=$(printf "\e[1m")  # Bolt TExt
readonly LGY=$(printf "\e[37m") # Light GraY
readonly LRE=$(printf "\e[91m") # Light REd
readonly LGR=$(printf "\e[92m") # Light GReen
readonly LYE=$(printf "\e[93m") # Light YEllow
readonly LBL=$(printf "\e[94m") # Light BLue
readonly LMA=$(printf "\e[95m") # Light MAgenta
readonly LCY=$(printf "\e[96m") # Light CYan

date()
{
	case ${OSTYPE} in
		darwin*)
			gdate "$@"
			;;
		*)
			command date "$@"
			;;
	esac
}

find()
{
	case ${OSTYPE} in
		darwin*)
			gfind "$@"
			;;
		*)
			command find "$@"
			;;
	esac
}

fmt()
{
	case ${OSTYPE} in
		darwin*)
			gfmt "$@"
			;;
		*)
			command fmt "$@"
			;;
	esac
}

readlink()
{
	case ${OSTYPE} in
		darwin*)
			greadlink -f "$@"
			;;
		*)
			command readlink -f "$@"
			;;
	esac
}

realpath()
{
	case ${OSTYPE} in
		darwin*)
			grealpath "$@"
			;;
		*)
			command realpath "$@"
			;;
	esac
}

sed()
{
	case ${OSTYPE} in
		darwin*)
			gsed "$@"
			;;
		*)
			command sed "$@"
			;;
	esac
}

tac()
{
	case ${OSTYPE} in
		darwin*)
			tail -r
			;;
		*)
			command tac
			;;
	esac
}

rename()
{
	os=$(identify_operating_system)

	if [[ ${os} != "macOS" ]]; then
		distro_id="$(grep "^ID=" /etc/os-release | cut -d= -f2)"
	else
		distro_id=${os}
	fi

	case ${distro_id} in
		"fedora")
			prename "$@"
			;;
		"arch"|"manjaro")
			perl-rename "$@"
			;;
		*)
			command rename "$@"
			;;
	esac
}

xargs()
{
	case ${OSTYPE} in
		darwin*)
			gxargs "$@"
			;;
		*)
			command xargs "$@"
			;;
	esac
}

identify_linux_or_wsl()
{
	if grep -qEi "(Microsoft|WSL)" /proc/version &> /dev/null ; then
		echo "WSL"
	else
		echo "Linux"
	fi
}

identify_operating_system()
{
	case "${OSTYPE}" in
		bsd*)     echo "BSD"     ;;
		darwin*)  echo "macOS"   ;;
		linux*)   echo "$(identify_linux_or_wsl)" ;;
		msys*)    echo "Windows" ;;
		solaris*) echo "Solaris" ;;
		*)        echo "Unknown" ;;
	esac
}

# Handle Ctrl-C
cleanup_on_exit()
{
	# force to kill the childs
	pkill -P $$ --signal 9 &> /dev/null

	# Restore board bkps
	if [[ -f "${kicad_pcb}.bkp" ]]; then
		mv -f "${kicad_pcb}.bkp" "${kicad_pcb}" &> /dev/null
	fi

	# Remove some leftovers
	# rm -rf ${OUTPUT_DIR_PATH}
	# rm -rf sch[12]-*.svg

	exit 1
}

kiri_kill()
{
	# Auxiliary function to exit form inside functions
	kill -s TERM "${KIRI_PID}" &> /dev/null
}

show_help()
{
	IFS= read -r -d '' HELP_MESSAGE <<-EOM
	USAGE:

	    kiri [OPTIONS] [KICAD_PROJECT_FILE]

	DESCRIPTION:

	    Kiri is a proof of concept script to automate the usage of
	    plotkicadsch (plotgitsch) and Kicad-Diff (kidiff) in a single easy-to-use tool.

	OPTIONS:

	     ls               List commits with changes in .*sch/.kicad_pcb
	     lsa              List all commits of the project

	     -a|--all         Include all commits even if schematics/layout don't have changes
	     -o|--oldest HASH  Process commits until this one. The HASH is the short one.
	     -n|--newest HASH  Process commits after this one, including it. The HASH is the short one.
	     -t|--last VAL    Show last N commits.

	     -g|--git-diff HASH..HASH
	                      Git style comparison where X is two commit hashes (or tags)
	                      Examples:
	                        -g 1a8168c..0807c21
	                        -g HEAD~1..0807c21
	                        -g HEAD
	                        -g HEAD..LOCAL
	                        -g v1.1.0..v1.0.0
	                        -g v1.1.0..0807c21

	     -e|--exclude-proj REGEXP
	                      Sed regepx pattern to exclude when looking for kicad project files.

	     -l|--no-server   Do not launch webserver/browser at the end
	     -S|--server-only Start webserver but not launch browser
	     -p|--port PORT   Set webserver port. By default it will try to use an available port.
	     -i|--ip ADDR     Override the default 127.0.0.1 IP address

	     -s|--skip-cache  Skip usage of -cache.lib on plotgitsch
	     -6|--skip-kicad6 Skip plotting Kicad 6 schematics (.kicad.sch)

	     -u|--layout      Force starting with the Layout view selected
	     -f|--page-frame  Disable page frame for PCB
	     -k|--kicad-cli   Force kicad-cli to plot layout

	     -d|--output-dir  Change output folder path/name
	     -r|--remove      Remove generated folder before running it
	     -x|--archive     Archive generate files

	     -v|--version     Show version
	     -h|--help        Show help

	     -sxy|--sch_xy x,y
	                      Set x,y of svg viewBox for Schematics (workaround for problematic SVG's of Kicad)
	     -pxy|--pcb_xy x,y
	                      Set x,y of svg viewBox for PCBs (workaround for problematic SVG's of Kicad)

	     -R|--raw-svg)    Disable svg optimization

	     -X|--super-debug Tons of things
	     -D|--debug       Extra info
	    -dp|--debug-sch   Show Plotgitsch stdout and stderr
	    -dk|--debug-pcb   Show Kidiff stdout and stderr
	     -y|--dry-run     Run without generate artifacts
	     -V|--verbose     Verbose

	KICAD_PROJECT_FILE:

	    KICAD_PROJECT_FILE is optional.
	    If it is missing the GUI file selector will be loaded

	EXAMPLES:

	    # Launch GUI with file selector
	    kiri

	    # Kicad project on the root of the repo
	    kiri board.pro

	    # Nested project (with verbose and starting fresh)
	    kiri nested-project/board.pro -r -D

	    # Nested project (Debugging issues)
	    kiri board.kicad_pro -r -D
	EOM

	printf "\n%s\n" "${HELP_MESSAGE}" | less
}

is_tool_avail()
{
	local tool=${1}
	local no_exit=${2}

	if ! command -v "${tool}" &> /dev/null; then
		if [[ "${no_exit}" != 1 ]]; then
			echo "ERROR: ${tool} could not be found" 1>&2
			exit 1
		else
			# echo "${LBL}INFO: ${tool} is missing, skiping its use${RCO}" 1>&2
			return 1
		fi
	else
		return 0
	fi
}

check_required_tools()
{
	local no_exit=1

	readonly PLOTGITSCH_MISSING=$(is_tool_avail "plotgitsch" ${no_exit})
	readonly KIDIFF_MISSING=$(is_tool_avail "kidiff" ${no_exit})

	case ${OSTYPE} in
		darwin*)
			is_tool_avail "gsed"
			is_tool_avail "gfind"
			is_tool_avail "greadlink"
			;;
	esac
}

launch_project_selector_gui()
{
	local file_path

	if [[ -z ${DISPLAY} ]]; then
		export DISPLAY=:1.0
	fi

	if ! file_path=$(kiri-file-picker); then
		return $?
	fi

	echo "${file_path}"
}

get_project_repo_abspath()
{
	local dir_path="$(dirname "${KICAD_PRO_ABSOLUTE_PATH}")"
	cd "${dir_path}" &> /dev/null || exit

	if git rev-parse --is-inside-work-tree > /dev/null 2>&1; then
		git rev-parse --show-toplevel
	else
		echo "Error: The ${KICAD_PRO_ABSOLUTE_PATH} is not inside a git directory" >&2
		kiri_kill
	fi
}

get_project_nested_path()
{
	dirname "${KICAD_PRO_ABSOLUTE_PATH#"${REPO_ABSOLUTE_PATH}"/}"
}

command_line_parse()
{
	local output_dir=".kiri"

	cmd_bkp="$(basename $0) $*"

	while [[ ${#} -gt 0 ]]; do

		local key="${1}"

		case "${key}" in

			-a|--all)
				ALL_COMMITS=1
				shift
				;;

			-d|--output-dir)
				local output_dir=${2}
				shift 2
				;;

			-g|--git-diff)
				DIFF_COMMITS="${2}"
				shift 2
				;;

			-y|--dry-run)
				DRY_RUN=1
				START_SERVER=0
				VERBOSE=1
				shift
				;;

			-h|--help)
				show_help
				exit 0
				;;

			-l|--no-server)
				START_SERVER=0
				shift
				;;

			-e|--exclude-proj)
				KICAD_PRO_FIND_EXCLUDE_PATTERN="${2}"
				shift 2
				;;

			-n|--newest|--newer)
				NEWEST_COMMIT="${2}"
				shift 2
				;;

			-o|--oldest|--older)
				OLDEST_COMMIT="${2}"
				shift 2
				;;

			-t|--last)
				SELECT_LASTEST_N_COMMITS="${2}"
				shift 2
				;;

			-r|--remove)
				REMOVE_KIRI_FOLDER=1
				shift
				;;

			-p|--port)
				WEBSERVER_PORT="${2}"
				shift 2
				;;

			-V|--verbose)
				VERBOSE=1
				shift
				;;

			-v|--version)
				show_tools_versions
				exit 0
				;;

			-X|--super-debug)
				cmd=$(echo "${cmd_bkp}" | sed "s/-X//g")
				SUPER_DEBUG=1 ${cmd}
				exit
				;;

			-E|--super-debug-exit)
				cmd=$(echo "${cmd_bkp}" | sed "s/-E//g")
				SUPER_DEBUG_EXIT_ON_ERROR=1 ${cmd}
				exit
				;;

			-D|--debug)
				DEBUG=1
				DEBUG_KIDIFF=1
				DEBUG_PLOTGITSCH=1
				shift
				;;

			-Dp|-DP|-dp|--debug-plotgitsch)
				DEBUG_PLOTGITSCH=1
				shift
				;;

			-Dk|-DK|-dk|--debug-kidiff)
				DEBUG_KIDIFF=1
				shift
				;;

			-x|--archive)
				ARCHIVE_PROJECT=1
				START_SERVER=0
				shift
				;;

			-s|--skip-cache)
				SKIP_CACHE_LIB=1
				shift
				;;

			-S|--server-only)
				LAUNCH_BROWSER=0
				shift
				;;

			-u|--layout)
				START_ON_LAYOUT_VIEW=1
				shift
				;;

			-f|--frame)
				PAGE_FRAME=0
				shift
				;;

			-6|--skip-kicad6)
				SKIP_KICAD_6=1
				shift
				;;

			-k|--kicad-cli)
				PLOT_LAYOUT_WITH_KICAD_CLI=1
				shift
				;;

			-i|--ip)
				IP_ADDRESS="${2}"
				shift 2
				;;

			-pxy|--pcb_xy)
				PCB_SVG_VIEWBOX_XY="${2}"
				shift 2
				;;

			-sxy|--sch_xy)
				SCH_SVG_VIEWBOX_XY="${2}"
				shift 2
				;;

			-R|--raw-svg)
				DO_NOT_OPTIMIZE_SVG=1
				shift 1
				;;

			ls)
				LIST_COMMITS_AND_LEAVE=1
				shift 1
				;;

			lsa)
				LIST_COMMITS_AND_LEAVE=1
				ALL_COMMITS=1
				shift 1
				;;

			--*|-*)
				echo "Unknown argument '${1}'"
				exit 1
				;;

			*)
				local kicad_pro_path="${1}"
				shift
				;;
		esac
	done

	KICAD_PRO_ABSOLUTE_PATH=$(realpath "${kicad_pro_path/#\~/$HOME}" 2> /dev/null)
	if [[ ! -f ${KICAD_PRO_ABSOLUTE_PATH} ]]; then
		if [[ -n ${kicad_pro_path} ]]; then
			echo "Kicad pro (${kicad_pro_path}) does not exist"
		fi
		local kicad_pro_path=$(find ./ -maxdepth 1 -name "*\.pro" -o -name "*\.kicad_pro" | sed "/${KICAD_PRO_FIND_EXCLUDE_PATTERN}/d" | sort -n | head -n1)
		if [[ -f ${kicad_pro_path} ]]; then
			if [[ ! "${LIST_COMMITS_AND_LEAVE}" == "1" ]]; then
				echo "Using Kicad project ${kicad_pro_path}"
			fi
		fi
		KICAD_PRO_ABSOLUTE_PATH=$(realpath "${kicad_pro_path}" 2> /dev/null)
			if [[ ! -f ${KICAD_PRO_ABSOLUTE_PATH} ]]; then
				printf "Kicad project is missing.\n\n"
				exit 1
			fi
	fi

	readonly KICAD_PRO_ABSOLUTE_PATH
	readonly REPO_ABSOLUTE_PATH="$(get_project_repo_abspath)"
	KICAD_PROJ_NESTED_PATH="$(get_project_nested_path)"

	readonly KICAD_PROJ_ABSOLUTE_PATH="${REPO_ABSOLUTE_PATH}/${KICAD_PROJ_NESTED_PATH}"
	cd "${KICAD_PROJ_ABSOLUTE_PATH}" || exit

	if [[ -n ${output_dir} ]]; then
		readonly OUTPUT_DIR_PATH=$(realpath "${output_dir}")
		mkdir -p "${OUTPUT_DIR_PATH}"
	else
		printf "ERROR: Output folder is empty\n"
		exit 1
	fi

	if [[ -z ${IP_ADDRESS} ]]; then
		readonly IP_ADDRESS="127.0.0.1"
	fi

	readonly WEB_DIR_PATH="${OUTPUT_DIR_PATH}/web/"
}

get_kicad_version()
{
	# kicad_version.py "$@"
	kicad_version "$@"
}

get_kidiff_version()
{
	local kidiff_repo_path
	local super_git_path
	local last_commit_hash
	local last_commit_date
	local submodule_version

	kidiff_repo_path=$(dirname "$(dirname "$(which kidiff)")")
	git_toplevel=$(git --git-dir "${kidiff_repo_path}/.git" rev-parse --show-toplevel)

	super_git_path="${kidiff_repo_path}/.git"
	submodule_git_path="${git_toplevel}/.git"

	# Using standalone cloned KiDiff project
	if [[ "${kidiff_repo_path}" == "${git_toplevel}" ]]; then
		last_commit_hash=$(git --git-dir "${super_git_path}" rev-parse --short HEAD)
		last_commit_date=$(git --git-dir "${super_git_path}" log -1 --format="%at")
		last_commit_date_formatted=$(date -d @"${last_commit_date}" +"%Y/%m/%d %Hh%M")
		echo "${last_commit_hash} ${last_commit_date_formatted}"
	else
		# Using cloned KiDiff as KiRI submodule
		if [[ -d "${submodule_git_path}" ]]; then
		submodule_version=$(git --git-dir "${submodule_git_path}" submodule status -- "submodules/KiCad-Diff" | sed "s/^[ ]\+//g")
		echo "${submodule_version}"
		# Kidiff was not cloned from git so it does not have version
		else
			echo "(unknown version)"
		fi
	fi
}

get_kiri_version()
{
	local tool_path
	local git_dir_path
	local last_commit_hash
	local last_commit_date

	tool_path=$(dirname "$(dirname "$(which kiri)")")
	git_dir_path="${tool_path}/.git"

	if [[ -d "${git_dir_path}" ]]; then
		last_commit_hash=$(git --git-dir "${git_dir_path}" rev-parse --short HEAD)
		last_commit_date=$(git --git-dir "${git_dir_path}" log -1 --format="%at")
		last_commit_date_formatted=$(date -d @"${last_commit_date}" +"%Y/%m/%d %Hh%M")
		echo "${last_commit_hash} ${last_commit_date_formatted}"
	else
		echo "Unknown"
	fi
}

show_tools_versions()
{
	if which plotgitsch &> /dev/null; then
		plotgitsch_version="plotgitsch $(plotgitsch --version)"
	else
		plotgitsch_version="plotgitsch is not installed"
	fi

	if which kidiff &> /dev/null; then
		kidiff_version="kidiff $(get_kidiff_version)"
	else
		kidiff_version="kidiff is not installed"
	fi

	IFS= read -r -d '' VERSION <<-EOM
	    $(basename "${0}") $(get_kiri_version)
	    kicad $(kicad_version)
	    ${plotgitsch_version}
	    ${kidiff_version}
	EOM

	printf "\n%s\n" "${VERSION}"
}

get_file_without_extention()
{
	local filename="$(basename "${1}")"
	echo "${filename%.*}"
}

get_file_extension()
{
	echo "${1##*.}"
}

get_schematic_vesion()
{
	local kicad_sch="${1}"
	local file_extension=$(get_file_extension "${kicad_sch}")

	case ${file_extension} in

		sch)
			# Format:
			# EESchema Schematic File Version 4
			grep -i "File Version" "${kicad_sch}" -m 1 | cut -d" " -f5 | tr -d '\0'
			;;

		kicad_sch)
			# Format
			# (kicad_sch (version 20211123) (generator eeschema) # Kicad 6
			# (kicad_sch (version 20230121) (generator eeschema) # Kicad 7
			# (version 20231120) # Kicad 8
			# (version 20250114) # Kicad 9
			grep -i "(version" "${kicad_sch}" -m 1 | sed "s/.*version //g" | cut -d")" -f1 | tr -d '\0'
			;;
	esac
}

get_layout_version()
{
	# (kicad_pcb (version 4) (host kicad "dummy file") )
	# (kicad_pcb (version 20171130) (host pcbnew "(5.0.0-rc2-76-gb5f63567d)")
	# (kicad_pcb (version 20171130) (host pcbnew "(5.1.6)-1")
	# (kicad_pcb (version 20171130) (host pcbnew 5.0.0-rc3-unknown-eaf938c~65~ubuntu18.04.1)
	# (kicad_pcb (version 20171130) (host pcbnew 5.0.1-33cea8e~67~ubuntu18.04.1)
	# (kicad_pcb (version 20171130) (host pcbnew 5.1.5+dfsg1-2~bpo10+1)
	# (kicad_pcb (version 20171130) (host pcbnew 5.1.6-c6e7f7d~86~ubuntu20.04.1)
	# (kicad_pcb (version 20171130) (host pcbnew 6.0.0-rc1-unknown-da35b16~65~ubuntu18.04.1)
	# (kicad_pcb (version 20200104) (host pcbnew "(5.99.0-879-ga0698723b)")
	# (kicad_pcb (version 20210606) (generator pcbnew)  # Kicad 6
	# (kicad_pcb (version 20221018) (generator pcbnew)  # Kicad 7
	# (version 20240108)  # Kicad 8
	# (version 20241229)  # Kicad 9

	local kicad_pcb="${1}"
	grep -i "(version" "${kicad_pcb}" -m 1 | sed "s/.*version //g" | cut -d")" -f1 | tr -d '\0'
}

set_default_html_view()
{
	local kicad_sch="${1}"

	# Kicad-6 does not have a schematic cli-exporter fully working (only my xdootool script for linux)
	if [[ $(kicad_version | cut -d"." -f1) == 6 ]]; then
		START_ON_LAYOUT_VIEW=1
	fi

	if [[ "${START_ON_LAYOUT_VIEW}" == 1 ]]; then
		echo "- Setting initial view to layout"
		sed -i "s/selected_view = \"schematic\";/selected_view = \"layout\";/g" "${WEB_DIR_PATH}/kiri.js"
	fi
}

uniq_files_list()
{
	local files=("${@}")
	local files_parsed
	local item
	local found

	files_parsed=$(echo "${files[@]}" | sed "s/\([\._]sch\) /\1\n/g" | sed "s/\([\._]pcb\) /\1\n/g" | sed "s/\([\._]pro\) /\1\n/g" | sed '/^$/N;/^\n$/D' | tr "\n" "#" | sed "s/#$//g")

	unset files
	SAVEIFS=${IFS}
	IFS='#'

	# echo ">> ${files_parsed}" >&2

	for item in ${files_parsed[@]}; do

		# echo >&2
		# echo ">> ${item}" >&2

		# echo "=> ${files[@]}" >&2

		found=0
		for i in ${files[@]}; do
		  if [[ "${i}" == "${item}" ]]; then
		    found=1
		  fi
		done

		if [[ ${found} == 0 ]]; then
			files="${item}#${files}"
		fi

	done
	IFS=${SAVEIFS}

	echo "${files[@]}" | sed "s/#$//g"
}

get_git_commits()
{
	local files=("${@}")
	local item

	local current_git_branch=$(git rev-parse --abbrev-ref HEAD)

	command_end=""

	if [[ "${ALL_COMMITS}" == "1" ]]; then

		local cmd="git log --date=format:'%Y-%m-%d %H:%M:%S' --pretty='format:%h | %ad | %an | %s%d' ${current_git_branch} -- ${command_end}"

	else

		# separate files with pipe
		files_parsed=$(echo "${files[@]}" | sed "s/\([\._]sch\) /\1\n/g" | sed "s/\([\._]pcb\) /\1\n/g" | sed "s/\([\._]pro\) /\1\n/g" | sed '/^$/N;/^\n$/D' | tr "\n" "#" | sed "s/#$//g")

		unset files
		SAVEIFS=${IFS}
		IFS='|'

		# echo ">> ${files_parsed}" >&2

		for item in ${files_parsed[@]}; do

			# echo >&2
			# echo ">> ${item}" >&2

			# echo "=> ${files[@]}" >&2

			found=0
			for i in ${files[@]}; do
			  if [[ -n ${item} ]] && [[ "${i}" == "${item}" ]]; then
			    found=1
			    # echo "<< FOUND >>" >&2
			  fi
			done

			if [[ ${found} == 0 ]]; then
		    # 	# echo "------------> (${item})" >&2
				# files+=("${item}")
				files="${item}#${files}"
			# # else
			# 	# echo "------------> (${item}) SKIPPING" >&2
			fi

		done
		IFS=${SAVEIFS}

		# files_parsed_quotes=$(echo "${files_parsed[@]}" | sed "s/^/'/g" | sed "s/|/' '/")
		files_quotes=$(echo "${files[@]}" | sed "s/#$/'/g" | sed "s/^/'/g" | sed "s/#/' '/g")

		# echo >&2
		# echo "==================" >&2
		# echo "${files_parsed_quotes}" >&2
		# echo "==================" >&2
		# echo "${files_quotes[@]}" >&2
		# echo "==================" >&2

		local cmd="git log --date=format:'%Y-%m-%d %H:%M:%S' --pretty='format:%h | %ad | %an | %s%d' ${current_git_branch} -- ${files_quotes} ${command_end}"
	fi

	if [[ "${VERBOSE}" = "1" ]] || [[ "${DEBUG}" == "1" ]]; then
		echo -e "\n${LBL}Selecting commits${RCO}" 1>&2
		echo -e "   ${LYE}${cmd}${RCO}" | fmt -w "$(tput cols)" | tr "\n" "#" | sed "s/#$/\n/g" | sed 's/\#/ \\\n/g' 1>&2
		echo 1>&2
	fi
	eval "$(echo "${cmd}" | tr "\n" " ")"
	ret="${?}"
	if [[ "${ret}" -gt "0" ]]; then
		echo -e "${LRE}Status: ${ret}${RCO}\n" 1>&2
	fi
}

get_name_of_current_user()
{
	case ${OSTYPE} in
		darwin*)
			username=$(id -F)
			;;
		*)
			username=$(cat /etc/passwd | grep "^${USER}" | head -n1 | cut -d":" -f5 | cut -d"," -f1)
			if [[ -z ${username} ]]; then
				username="Local User"
			fi
			;;
	esac

	if [[ -n ${username} ]]; then
		echo "${username}"
	else
		echo "${USER}"
	fi
}

git_files_have_changes()
{
	local files=("${@}")
	local has_changes="No"
	local ret=0
	local file

	if [[ "${DEBUG}" == "1" ]]; then
		echo -e "\n${LBL}Checking local changes${RCO}" 2>&1
	fi

	uniq_files_aux=($(uniq_files_list "${files[@]}"))

	# Testing, it looks like this variable is not needed even for nested projects
	# here it is being overwritten
	KICAD_PROJ_NESTED_PATH="."

	IFS='#'
	uniq_files=()
	read -a uniq_files <<< ${uniq_files_aux[@]}

	for file in ${uniq_files[@]}; do

		if [[ -n "${file}" ]]; then
			if ! git diff --quiet -- "${KICAD_PROJ_NESTED_PATH}/${file}"; then
				if [[ "${DEBUG}" == "1" ]]; then
					echo "[x] ${KICAD_PROJ_NESTED_PATH}/${file}" 2>&1
				fi
				has_changes="Yes"
				ret=1
			else
				if [[ "${DEBUG}" == "1" ]]; then
					echo "[ ] ${KICAD_PROJ_NESTED_PATH}/${file}" 2>&1
				fi
			fi
		fi
	done
	if [[ "${DEBUG}" == "1" ]]; then
		echo "${LMA}Files have local changes? ${LRE}${has_changes}${RCO}" 2>&1
	fi

	return ${ret}
}

get_git_commits_list()
{
	local kicad_pro="${1}"
	local kicad_sch="${2}"
	local kicad_pcb="${3}"
	local extra_sch_files="${4}"

	if [[ -n "${DIFF_COMMITS}" ]]; then

		commit_a=$(echo "${DIFF_COMMITS}" | sed "s/[\.]\{2\}/ /g" | cut -d" " -f1)
		commit_b=$(echo "${DIFF_COMMITS}" | sed "s/[\.]\{2\}/ /g" | cut -sd" " -f2)
		if [[ -z "${commit_b}" ]]; then
			commit_b="_local_"
		fi

		shopt -s nocasematch
		local_pattern="[.]*local[.]*"
		if [[ ${commit_a} =~ ${local_pattern} ]]; then
			commit_a_hash="_local_"
			commit_a="_local_ | $(date "+%Y-%m-%d %H:%M:%S") | $(get_name_of_current_user "${USER}") | Local changes not committed"
		else
			commit_a_hash=$(git rev-parse --short "${commit_a}")
			commit_a=$(git log --date=format:'%Y-%m-%d %H:%M:%S' --pretty='format:%h | %ad | %an | %s%d' -n1 ${commit_a_hash})
		fi

		if [[ ${commit_b} =~ ${local_pattern} ]]; then
			commit_b_hash="_local_"
			commit_b="_local_ | $(date "+%Y-%m-%d %H:%M:%S") | $(get_name_of_current_user "${USER}") | Local changes not committed"
		else
			commit_b_hash=$(git rev-parse --short "${commit_b}")
			commit_b=$(git log --date=format:'%Y-%m-%d %H:%M:%S' --pretty='format:%h | %ad | %an | %s%d' -n1 ${commit_b_hash})
		fi

		# echo
		# echo "Commit 1: ${commit_a_hash} | ${commit_a}"
		# echo "Commit 2: ${commit_b_hash} | ${commit_b}"

		read -r -d '' COMMITS <<- EOM
			${commit_a}
			${commit_b}
		EOM

	else

		if [[ "${ALL_COMMITS}" == "1" ]]; then
			COMMITS=$(get_git_commits)
		else
			COMMITS=$(get_git_commits "${kicad_sch}" "${extra_sch_files}" "${kicad_pcb}")
		fi

		# Append local files only if they have changes
		if ! git_files_have_changes "${kicad_pcb}" "${kicad_sch}" "${extra_sch_files}"; then
			IFS= read -r -d '' COMMITS <<-EOM
			_local_ | $(date "+%Y-%m-%d %H:%M:%S") | $(get_name_of_current_user "${USER}") | Local changes not committed
			${COMMITS}
			EOM
		fi

		if [[ -n "${OLDEST_COMMIT}" ]]; then
			if grep -q "^${OLDEST_COMMIT}" <<< ${COMMITS}; then
				if [[ "${VERBOSE}" == "1" ]] || [[ "${DEBUG}" == "1" ]]; then
					commit_info=$(grep -s "^${OLDEST_COMMIT}" <<< ${COMMITS})
					echo "  Oldest commit: ${commit_info}"
				fi
				COMMITS=$(echo "${COMMITS}" | sed "/^${OLDEST_COMMIT}/q")
			else
				echo -e "\n${LYE}Warning:${RCO} There is no OLDEST_COMMIT=${OLDEST_COMMIT} hash in the commits list"
			fi
		fi

		if [[ -n "${NEWEST_COMMIT}" ]]; then
			if grep -q "^${NEWEST_COMMIT}" <<< ${COMMITS}; then
				if [[ "${VERBOSE}" == "1" ]] || [[ "${DEBUG}" == "1" ]]; then
					commit_info=$(grep -s "^${NEWEST_COMMIT}" <<< ${COMMITS})
					echo "  Newest commit: ${commit_info}"
					echo
				fi
				COMMITS=$(echo "${COMMITS}" | sed -n "/^${NEWEST_COMMIT}/,\$p")
			else
				echo -e "\n${LYE}Warning:${RCO} There is no NEWEST_COMMIT=${NEWEST_COMMIT} hash in the commits list"
			fi
		fi

		if [[ -n "${SELECT_LASTEST_N_COMMITS}" ]]; then
			COMMITS=$(echo "${COMMITS}" | head -n "${SELECT_LASTEST_N_COMMITS}")
		fi

		if [[ "${VERBOSE}" == "1" ]] || [[ "${DEBUG}" == "1" ]]; then
			echo -e "${LBL}\nCommits list${RCO}"
			echo "${COMMITS}" | column -t -s "|" | nl | cut -c -$(($(tput cols)-4))
		fi

	fi

	if [[ "${LIST_COMMITS_AND_LEAVE}" == "1" ]]; then
		echo
		echo "${COMMITS}" | column -t -s "|" | nl | cut -c -$(($(tput cols)-4))
		exit 0
	fi

	# Commits list has to have 2 commits at least
	if [[ $(echo -e "${COMMITS}" | wc -l ) -lt 2 ]]; then
		echo -e "\n${LRE}Fewer than 2 commits found.${RCO}"
		exit 0
	fi
}

export_project_files()
{
	local commit_hash="${1}"

	if [[ "${DEBUG}" == "1" ]]; then
		indent=$(printf ' %.0s' {1..4})
		echo -e "\n${indent}${LCY}Retrieving commits:${RCO}"
		echo -e "${indent}- Source path: ${KICAD_PROJ_ABSOLUTE_PATH}"
		echo -e "${indent}- Output path: ${OUTPUT_DIR_PATH}/${commit_hash}"
	fi

	if [[ "${commit_hash}" == "_local_" ]]; then
		mkdir -p "${OUTPUT_DIR_PATH}/_local_"
		cp -r * "${OUTPUT_DIR_PATH}/_local_"

		# Convert windows CRLF line-endings on local files if any
		find "${OUTPUT_DIR_PATH}/_local_/" -type f \
		| xargs file {} \; \
		| grep -i "ASCII text.*CRLF" \
		| cut -d: -f1 \
		| xargs -I '{}' sed -i 's/\r//' '{}' &> /dev/null

	else
		mkdir -p "${OUTPUT_DIR_PATH}/${commit_hash}"
		git archive --format=tar ${commit_hash} | (cd "${OUTPUT_DIR_PATH}/${commit_hash}" && tar xf -)

		# Convert lfs pointers to actual files
		cd "${OUTPUT_DIR_PATH}/${commit_hash}"
		for file in *
		do
			git check-attr -a ${file} | grep "filter: lfs" > /dev/null
			if [ $? -eq 0 ]; then
				cat ${file} > tmp; cat tmp | git lfs smudge > ${file}
			fi
		done
		rm -f tmp
		cd - > /dev/null
	fi
}

# Maybe duplicated
get_kicad_pro_extension()
{
	local kicad_project_path="${1}"

	# Find's project version on that commit
	kicad_pro=$(find "${OUTPUT_DIR_PATH}/${commit_hash}/" -name "*.kicad_pro" | sed "/${KICAD_PRO_FIND_EXCLUDE_PATTERN}/d" | sort -n | head -n1)
	if [[ -z ${kicad_pro} ]]; then
		kicad_pro=$(find "${OUTPUT_DIR_PATH}/${commit_hash}/" -name "*.pro" | sed "/${KICAD_PRO_FIND_EXCLUDE_PATTERN}/d" | sort -n | head -n1)
	fi

	get_file_extension "${kicad_pro}"
}

# Maybe duplicated
get_kicad_pro_filename()
{
	local kicad_project_path="${1}"

	# Find's project version on that commit
	local kicad_pro=$(find "${OUTPUT_DIR_PATH}/${commit_hash}/" -name "*.kicad_pro" | sed "/${KICAD_PRO_FIND_EXCLUDE_PATTERN}/d" | sort -n | head -n1)
	if [[ -z ${kicad_pro} ]]; then
		local kicad_pro=$(find "${OUTPUT_DIR_PATH}/${commit_hash}/" -name "*.pro" | sed "/${KICAD_PRO_FIND_EXCLUDE_PATTERN}/d" | sort -n | head -n1)
	fi

	get_file_without_extention "${kicad_pro}"
}

parse_schematic_pages()
{
	# This function creates a list of pages of the project
	# Format:
	# FILENAME_WIITHOUT_EXTENSION|FILE_PATH_RELATIVE_TO_PROJ_ROOT|INSTANCE_UUID|INSTANCE_NAME|KICAD_HIERARCHY"

	local kicad_sch="${1}"

	local kicad_sch_dir_path="$(dirname "${kicad_sch}")"
	local main_page_name="$(get_file_without_extention "${kicad_sch}")"
	local main_page_basename="$(basename "${kicad_sch}")"
	local sch_extension="$(get_file_extension "${kicad_sch}")"

	cd ${kicad_sch_dir_path} &> /dev/null || exit

	case ${sch_extension} in

		"sch")
			pages=($(find_kicad5_sch_hier "${main_page_name}.${sch_extension}"))
			printf "%s\n" "${pages[@]}"
			;;

		"kicad_sch")
			pages=($(find_kicad6_sch_hier "${main_page_name}.${sch_extension}"))
			printf "%s\n" "${pages[@]}"
		;;
	esac

	cd - &> /dev/null || exit
}

create_project_info()
{
	local commit_hash="${1}"
	local kicad_pro="${2}"
	local kicad_sch="${3}"
	local kicad_pcb="${4}"
	mkdir -p "${OUTPUT_DIR_PATH}/${commit_hash}/_KIRI_/"
	printf "%s\n" "${kicad_pro}" > "${OUTPUT_DIR_PATH}/${commit_hash}/_KIRI_/pro_infos"

	sch_version=$(get_schematic_vesion ${kicad_sch})
	pcb_version=$(get_layout_version ${kicad_pcb})

	# EESchema Schematic File Version 4
	# (kicad_sch (version 20211123) (generator eeschema) # Kicad 6
	# (kicad_sch (version 20230121) (generator eeschema) # Kicad 7
	# (version 20231120) # Kicad 8
	# (version 20250114) # Kicad 9

	# (kicad_pcb (version 4) (host kicad "dummy file") )
	# (kicad_pcb (version 20171130) (host pcbnew "(5.0.0-rc2-76-gb5f63567d)")
	# (kicad_pcb (version 20171130)	(host pcbnew "(5.1.5)-3")
	# (kicad_pcb (version 20171130) (host pcbnew "(5.1.6)-1")
	# (kicad_pcb (version 20171130) (host pcbnew "(5.1.9)-1")
	# (kicad_pcb (version 20171130) (host pcbnew "(5.1.10)-1")
	# (kicad_pcb (version 20171130) (host pcbnew 5.0.0-rc3-unknown-eaf938c~65~ubuntu18.04.1)
	# (kicad_pcb (version 20171130) (host pcbnew 5.0.1-33cea8e~67~ubuntu18.04.1)
	# (kicad_pcb (version 20171130) (host pcbnew 5.1.5+dfsg1-2~bpo10+1)
	# (kicad_pcb (version 20171130) (host pcbnew 5.1.6-c6e7f7d~86~ubuntu20.04.1)
	# (kicad_pcb (version 20171130) (host pcbnew 5.1.6-c6e7f7d~87~ubuntu20.04.1)
	# (kicad_pcb (version 20171130) (host pcbnew 5.1.7-a382d34a8~87~ubuntu20.04.1)
	# (kicad_pcb (version 20171130) (host pcbnew 6.0.0-rc1-unknown-da35b16~65~ubuntu18.04.1)
	# (kicad_pcb (version 20200104) (host pcbnew "(5.99.0-879-ga0698723b)")
	# (kicad_pcb (version 20211014) (generator pcbnew)  # Kicad 6 ??
	# (kicad_pcb (version 20210606) (generator pcbnew)  # Kicad 6
	# (kicad_pcb (version 20221018) (generator pcbnew)  # Kicad 7
	# (version 20221018) # Kicad 8
	# (version 20241229) # Kicad 9

	case ${pcb_version} in
		       4) kicad_version="4"    ;;
		20171130) kicad_version="5"    ;;
		20200104) kicad_version="5.99" ;;
		20210606) kicad_version="6"    ;;
		20211014) kicad_version="6"    ;;
		20221018) kicad_version="7"    ;;
		20240108) kicad_version="8"    ;;
		20241229) kicad_version="9"    ;;
		*) kicad_version="Unknown"
	esac

	printf "kicad version = %s\n" "${kicad_version}" >> "${OUTPUT_DIR_PATH}/${commit_hash}/_KIRI_/pro_infos"
	printf "sch version = %s\n" "${sch_version}" >> "${OUTPUT_DIR_PATH}/${commit_hash}/_KIRI_/pro_infos"
	printf "pcb version = %s\n" "${pcb_version}" >> "${OUTPUT_DIR_PATH}/${commit_hash}/_KIRI_/pro_infos"

	if [[ "${VERBOSE}" == "1" ]] || [[ "${DEBUG}" == "1" ]]; then
		echo -e "${indent}${LCY}# Rev ${commit_hash} project info${RCO}"
		echo "${indent}    Kicad Version: ${kicad_version}"
		echo "${indent}      Sch Version: ${sch_version}"
		echo "${indent}      PCB Version: ${pcb_version}"
		echo
	fi

	# Probing...
	echo "# $(grep -E -i -m 1 "version [0-9]+" "${kicad_sch}")" >> "/tmp/sch_info"
	echo "# $(grep -E -i -m 1 "version [0-9]+" "${kicad_pcb}")" >> "/tmp/pcb_info"
}

create_list_of_pages()
{
	local commit_hash="${1}"
	local kicad_sch="${2}"
	local pages=$(parse_schematic_pages "${kicad_sch}")

	pages_file="${OUTPUT_DIR_PATH}/${commit_hash}/_KIRI_/sch_sheets"

	if [[ "${DEBUG}" == "1" ]]; then
		indent=$(printf ' %.0s' {1..4})
		echo -e "${indent}${LCY}Sch: ${RCO}${kicad_sch}"
		echo -e "${indent}${LCY}Pages: ${RCO}${pages_file}"
		# echo -e "${indent}${pages}" | nl -s": " | sed "s/^/${indent}/g"
		echo
	fi

	mkdir -p "$(dirname ${pages_file})"
	printf "%s\n" "${pages}" > "${pages_file}"
}

parse_layout_layers()
{
	# This function get the list of layers of a PCB
	# Format:
	# LAYER_ID|LAYER_NAME [LAYER_NAME_KICAD]

	local kicad_pcb="${1}"

	# Kicad .kicad_pcb format:
	# (2 "In2.Cu" power|signal|user hide "Pwr")

	pcb_version=$(get_layout_version ${kicad_pcb})

	if [[ ${pcb_version} -ge 20240108 ]]; then   # (version 20240108) # Kicad 8

		local layers=$( \
			sed -n '/^\t(layers/,/\t)$/{/^\t(layers/!{/\t)$/!p}}' "${kicad_pcb}" | \
			sed "s/^[ \t]\+//g" | \
			sed "s/[()]//g" | \
			sed "s/\r$//g" | \
			sed "s/\"//g" | \
			sed '/^[[:space:]]*$/d' | \
			sed -r "s/ (signal|user|power|hide)//g" | \
			awk -F '[ ]' '{if ($3) {printf "%s|%s\n", $1, $3} else {printf "%s|%s\n", $1, $2}}')

	else

		local layers=$( \
			sed -n '/^  (layers/,/  )$/{/^  (layers/!{/  )$/!p}}' "${kicad_pcb}" | \
			sed "s/^[ \t]\+//g" | \
			sed "s/[()]//g" | \
			sed "s/\r$//g" | \
			sed "s/\"//g" | \
			sed '/^[[:space:]]*$/d' | \
			sed -r "s/ (signal|user|power|hide)//g" | \
			awk -F '[ ]' '{if ($3) {printf "%s|%s\n", $1, $3} else {printf "%s|%s\n", $1, $2}}')

	fi

	printf "%s\n" "${layers}"
}

create_list_of_layers()
{
	local commit_hash="${1}"
	local kicad_pcb="${2}"
	local layers=$(parse_layout_layers "${kicad_pcb}")

	layers_file="${OUTPUT_DIR_PATH}/${commit_hash}/_KIRI_/pcb_layers"

	if [[ "${DEBUG}" == "1" ]]; then
		indent=$(printf ' %.0s' {1..4})
		echo -e "${indent}${LCY}PCB: ${RCO}${kicad_pcb}"
		echo -e "${indent}${LCY}Layers: ${RCO}${layers_file}"
		# echo -e "${indent}${layers}\n" | column -t | nl -s": " | sed "s/^/${indent}/g"
		echo
	fi

	mkdir -p "$(dirname ${layers_file})"
	printf "%s\n" "${layers}" > "${layers_file}"
}

cmd_run()
{
	cmd="${1}"
	msg="${2}"
	end="${3}"
	indent=$(printf ' %.0s' {1..4})

	# present command description if any
	if [[ -n "${msg}" && ("${VERBOSE}" == "1" || "${DEBUG}" == "1") ]]; then
		echo -e "${indent}${LCY}${msg}${RCO}"
		echo -e "${indent}${LMA}DIR: $(pwd)${RCO}"
		echo -e "${indent}${LYE}${cmd}${RCO}" | fmt -w "$(tput cols)" | tr "\n" "#" | sed "s/#$/\n/g" | sed 's/\#/ \\\n/g'
	fi

	# eval the command
	eval "${cmd}" 2>&1 ${end} | sed -e '$a\' | sed "s/^/${indent}${LGY}| /g" | sed "s/$/${RCO}/g"
	ret="${PIPESTATUS[0]}"

	# present the command status
	if [[ "${VERBOSE}" == "1" ]] || [[ "${DEBUG}" == "1" ]]; then
		if [[ "${ret}" -gt "0" ]]; then
			echo -e "${indent}${LRE}${BTE}Status: ${ret}${RCO}"
		else
			echo -e "${indent}${LMA}${BTE}Status: ${ret}${RCO}"
		fi
		echo "${indent}--"
		echo
	fi

	return ${ret}
}

manual_schematic_plot()
{
	local commit_hash="${1}"
	local kicad_sch="${2}"
	local kicad_cache_lib="${3}"

	local command_end="&> /dev/null"

	# verbose shows errors only
	if [[ "${VERBOSE}" == "1" ]]; then
		command_end="2>&1 >/dev/null"
	fi

	# debug shows the whole output
	if [[ "${DEBUG}" == "1" ]] || [[ "${DEBUG_PLOTGITSCH}" == "1" ]]; then
		command_end=""
	fi

	cd "${OUTPUT_DIR_PATH}/${commit_hash}/" &> /dev/null || exit

	if [[ "$(get_file_extension "${kicad_sch}")" == "kicad_sch" ]] || [[ ${FORCE_PLOTTING_GRAPHICALLY} == "1" ]]; then

		if [[ "${SKIP_KICAD_6}" == "0" ]] && [[ ! "${OSTYPE}" =~ "darwin" ]]; then

			if [[ -z ${PLOT_TIMEOUT} ]]; then
				PLOT_TIMEOUT=5
			fi

			msg="# Plotting schematics, ${commit_hash}"
			cmd="timeout ${PLOT_TIMEOUT} plot_kicad_sch ${kicad_sch}"
			end="${command_end}"
			cmd_run "${cmd}" "${msg}" "${end}"

		else
			if [[ "${SKIP_KICAD_6}" == "1" ]]; then
				if [[ "${VERBOSE}" = "1" ]] || [[ "${DEBUG}" = "1" ]] || [[ "${DEBUG_PLOTGITSCH}" = "1" ]]; then
					echo -e "   ${LBL}[Kicad 6] (${commit_hash}) Schematic plot was disabled${RCO}"
				fi
			else
				if [[ "${OSTYPE}" =~ "darwin" ]]; then
					msg="# Plotting schematics, ${commit_hash}"
					cmd="plot_kicad_sch_macos ${kicad_sch}"
					end="${command_end}"
					cmd_run "${cmd}" "${msg}" "${end}"
				fi
			fi
		fi

	else

		if [[ -f "${kicad_sch}" ]]; then

			all_kicad_sch_files=("${kicad_sch}" $(get_kicad_sch_pages "${kicad_sch}" ${commit_hash}))

			svg_dir_path="${OUTPUT_DIR_PATH}/${commit_hash}/_KIRI_/sch"
			mkdir -p "${svg_dir_path}"

			IFS=$'\n'
			for kicad_sch_aux in "${all_kicad_sch_files[@]}"; do

				if [[ ! ${SKIP_CACHE_LIB} == 1 ]]; then
					# TODO: kicad_cache_lib_1 and kicad_cache_lib_2 may differ
					if [[ -n "${kicad_cache_lib}" ]]; then
						local cache_lib_param="-l ${kicad_cache_lib}"
					fi
				fi

				if [[ -f "${kicad_cache_lib}" ]]; then

					msg="# Plotting schematics, ${commit_hash}: $(pwd)"
					cmd="plotkicadsch -f ${kicad_sch_aux} ${cache_lib_param} -o \"${svg_dir_path}\""
					end="${command_end}"
					cmd_run "${cmd}" "${msg}" "${end}"
					ret=${?}

					if [[ "${ret}" == "0" ]]; then

						# TODO: Needs tests, since it may not be generating other pages,
						# or they may need to have names improved
						local board_name=$(get_file_without_extention "${kicad_sch_aux}")
						if [[ -f "${svg_dir_path}/${board_name}.svg" ]]; then
							# TODO: How to force fix of the viewbox when the images are off center?
							plotgitsch_svg_tweaks "${svg_dir_path}/${board_name}.svg"| sed "s/^/   ${LGY}| /g" | sed "s/$/${RCO}/g"
						fi

					else

						if [[ "${SKIP_KICAD_6}" == "0" ]] && [[ ! "${OSTYPE}" =~ "darwin" ]]; then

							if [[ "${DEBUG}" == "1" ]] || [[ "${DEBUG_PLOTGITSCH}" == "1" ]]; then
								echo -e "    ${LRE}Plotkicadsch has failed. Trying it with xdotool...${RCO}"
							fi

							PLOTPCB_TIMEOUT=5

							# TESTING: Plokicadsch has failed, then usig GUI
							# IF THIS IS GOOD. Then it is better to organize this function main_if order here to avoid repetition

							msg="# Plotting schematics, ${commit_hash}"
							cmd="timeout ${PLOTPCB_TIMEOUT} plot_kicad_sch ${kicad_sch}"
							end="${command_end}"
							cmd_run "${cmd}" "${msg}" "${end}"

							break

						else

							if [[ "${OSTYPE}" =~ "darwin" ]]; then

								if [[ "${DEBUG}" == "1" ]] || [[ "${DEBUG_PLOTGITSCH}" == "1" ]]; then
									echo -e "    ${LRE}Plotkicadsch has failed. Trying it with cliclick...${RCO}"
								fi

								msg="# Plotting schematics, ${commit_hash}"
								cmd="plot_kicad_sch_macos ${kicad_sch}"
								end="${command_end}"
								cmd_run "${cmd}" "${msg}" "${end}"
								ret=${?}

								break
							fi
						fi
					fi
				fi
			done
		fi
	fi

	cd - &> /dev/null || exit
}

generate_schematic_artifacts()
{
	local commit_hash_1="${1}"
	local commit_hash_2="${2}"
	local kicad_sch_1="${3}"
	local kicad_sch_2="${4}"
	local kicad_cache_lib_1="${5}"
	local kicad_cache_lib_2="${6}"
	local i="${7}"
	local proj_name_1=${8}
	local proj_name_2=${9}

	if [[ -f $(which kicad-cli 2> /dev/null) ]] \
	&& [[ $(get_file_extension "${kicad_sch_1}") != "sch" ]] \
	&& [[ $(get_file_extension "${kicad_sch_2}") != "sch" ]]; then

		if [[ "${VERBOSE}" == "1" ]] || [[ "${DEBUG}" == "1" ]]; then
			echo
		fi

		local command_end="&> /dev/null"

		# verbose shows errors only
		if [[ "${VERBOSE}" == "1" ]]; then
			command_end="2>&1 >/dev/null"
		fi

		# debug shows the whole output
		if [[ "${DEBUG}" == "1" ]]; then
			command_end=""
		fi

		# Configure git-imagediff used by plotgitsch
		export SVG1_DIR_PATH="${OUTPUT_DIR_PATH}/${commit_hash_1}/_KIRI_/sch"
		export SVG2_DIR_PATH="${OUTPUT_DIR_PATH}/${commit_hash_2}/_KIRI_/sch"
		PAGES_FILE_1="${OUTPUT_DIR_PATH}/${commit_hash_1}/_KIRI_/sch_sheets"
		PAGES_FILE_2="${OUTPUT_DIR_PATH}/${commit_hash_2}/_KIRI_/sch_sheets"
		mkdir -p "${SVG1_DIR_PATH}"
		mkdir -p "${SVG2_DIR_PATH}"

		# This one is needed only once since it is always the same
		if [[ "${i}" == "2" ]]; then

			msg="# Plotting schematics, ${commit_hash_1}"
			cmd="kicad-cli sch export svg --black-and-white --no-background-color --output \"${SVG1_DIR_PATH}\" \"${OUTPUT_DIR_PATH}/${commit_hash_1}/${kicad_sch_1}\""
			end="${command_end}"
			cmd_run "${cmd}" "${msg}" "${end}"

			# kicad-cli exports the files using the sheet's title, not its file name
			original_ifs="${IFS}"
			IFS="|"
			while read file_name current_sch_rel uuid instance_name parent_inst; do
				if [ "${parent_inst}" != "${file_name}" ]; then
					mv "${SVG1_DIR_PATH}/${parent_inst}.svg" "${SVG1_DIR_PATH}/${file_name}.svg"
				fi
			done < "${PAGES_FILE_1}"
			IFS="${original_ifs}"
		fi

		msg="# Plotting schematics, ${commit_hash_2}"
		cmd="kicad-cli sch export svg --black-and-white --no-background-color --output \"${SVG2_DIR_PATH}\" \"${OUTPUT_DIR_PATH}/${commit_hash_2}/${kicad_sch_2}\""
		end="${command_end}"
		cmd_run "${cmd}" "${msg}" "${end}"

		# kicad-cli exports the files using the sheet's title, not its file name
		original_ifs="${IFS}"
		IFS="|"
		while read file_name current_sch_rel uuid instance_name parent_inst; do
			if [ "${parent_inst}" != "${file_name}" ]; then
				mv "${SVG2_DIR_PATH}/${parent_inst}.svg" "${SVG2_DIR_PATH}/${file_name}.svg"
			fi
		done < "${PAGES_FILE_2}"
		IFS="${original_ifs}"

	else

		if [[ ! "${PLOTGITSCH_MISSING}" == 1 ]]; then

			if [[ "${VERBOSE}" == "1" ]] || [[ "${DEBUG}" == "1" ]] || [[ "${DEBUG_PLOTGITSCH}" == "1" ]]; then
				echo
			fi

			local command_end="&> /dev/null"

			# verbose shows errors only
			if [[ "${VERBOSE}" == "1" ]]; then
				command_end="2>&1 >/dev/null"
			fi

			# debug shows the whole output
			if [[ "${DEBUG}" == "1" ]] || [[ "${DEBUG_PLOTGITSCH}" == "1" ]]; then
				command_end=""
			fi

			# plotgitsch requires an empty string when plotting local changes
			commit_hash_aux_1="${commit_hash_1}"
			commit_hash_aux_2="${commit_hash_2}"
			if [[ "${commit_hash_1}" == "_local_" ]]; then commit_hash_aux_1=""; fi
			if [[ "${commit_hash_2}" == "_local_" ]]; then commit_hash_aux_2=""; fi

			# When both commits are .sch then use plotgitsch (this already processes all pages)
			# Skip plotgitsch when both commits are .kicad_sch
			# Then plotkicadsch for each .sch (processing all pages) and skip .kicad_sch files

			local kicad_sch_extension_1=$(get_file_extension "${kicad_sch_1}")
			local kicad_sch_extension_2=$(get_file_extension "${kicad_sch_2}")

			if { [[ "${kicad_sch_extension_1}" == "sch" ]] && [[ "${kicad_sch_extension_2}" == "sch" ]]; } && [[ "${FORCE_PLOTTING_GRAPHICALLY}" == "0" ]]; then

				local removed_color="FF0000"
				local added_color="008FFF"
				local unchanged_color="FFFFFF"
				local background_color="222222"
				local color_scheme="-c ${removed_color}:${added_color}:${unchanged_color}:${background_color} ${commit_hash_aux_1} ${commit_hash_aux_2}"

				if [[ "${KICAD_PROJ_NESTED_PATH}" != "." ]]; then
					relative_path="-r ${KICAD_PROJ_NESTED_PATH}"
				fi

				if [[ ! ${SKIP_CACHE_LIB} == 1 ]]; then
					# TODO: kicad_cache_lib_1 and kicad_cache_lib_2 may differ
					if [[ -f "${kicad_cache_lib_1}" ]]; then
						cache_lib="-l ${kicad_cache_lib_1}"
					else
						if [[ -f "${kicad_cache_lib_2}" ]]; then
							cache_lib="-l ${kicad_cache_lib_2}"
						fi
					fi
				fi

				# Configure git-imagediff used by plotgitsch
				export IMGDIFF_SVG1_DIR_PATH="${OUTPUT_DIR_PATH}/${commit_hash_1}/_KIRI_/sch"
				export IMGDIFF_SVG2_DIR_PATH="${OUTPUT_DIR_PATH}/${commit_hash_2}/_KIRI_/sch"
				mkdir -p "${IMGDIFF_SVG1_DIR_PATH}"
				mkdir -p "${IMGDIFF_SVG2_DIR_PATH}"

				msg="# Plotting schematics, ${commit_hash_1}, ${commit_hash_2}"
				cmd="plotgitsch --keep --allow_missing ${relative_path} ${cache_lib} ${color_scheme}"
				end="${command_end}"
				cmd_run "${cmd}" "${msg}" "${end}"

			else

				# This one is needed only once since it is always the same
				if [[ "${i}" == "2" ]]; then
					manual_schematic_plot "${commit_hash_1}" "${kicad_sch_1}" "${kicad_cache_lib_1}"
				fi
				manual_schematic_plot "${commit_hash_2}" "${kicad_sch_2}" "${kicad_cache_lib_2}"

			fi
		fi
	fi

	if which svgo &> /dev/null; then
		if [[ -z ${DO_NOT_OPTIMIZE_SVG} ]]; then
			if [[ "${i}" == "2" ]]; then
				msg="# Optimizing svg for web, ${commit_hash_1}"
				cmd="optimize_svg_for_web ${OUTPUT_DIR_PATH}/${commit_hash_1}/_KIRI_/sch"
				end="${command_end}"
				cmd_run "${cmd}" "${msg}" "${end}"
			fi
			msg="# Optimizing svg for web, ${commit_hash_2}"
			cmd="optimize_svg_for_web ${OUTPUT_DIR_PATH}/${commit_hash_2}/_KIRI_/sch"
			end="${command_end}"
			cmd_run "${cmd}" "${msg}" "${end}"
		fi
	fi

	# if [[ "${VERBOSE}" == "1" ]] || [[ "${DEBUG}" == "1" ]] || [[ "${DEBUG_PLOTGITSCH}" == "1" ]]; then
		# echo
	# fi
}

generate_layout_artifacts()
{
	local commit_hash_1="${1}"
	local commit_hash_2="${2}"
	local kicad_pcb_1="${3}"
	local kicad_pcb_2="${4}"
	local kicad_project_name_1="${5}"
	local kicad_project_name_2="${6}"

	local proj_name_1=${8}
	local proj_name_2=${9}

	# kicad-cli to plot layers works but KICAD-DIFF is faster
	# use it only if kicad-diff is missing

	if [[ -f $(which kicad-cli 2> /dev/null) ]] && [[ ${PLOT_LAYOUT_WITH_KICAD_CLI} == 1 ]]; then

		local command_end="&> /dev/null &"
		if [[ "${DEBUG}" == 1 ]]; then
			command_end="&"
		fi

		# Configure git-imagediff used by plotgitsch
		export SVG1_DIR_PATH="${OUTPUT_DIR_PATH}/${commit_hash_1}/_KIRI_/pcb"
		export SVG2_DIR_PATH="${OUTPUT_DIR_PATH}/${commit_hash_2}/_KIRI_/pcb"
		mkdir -p "${SVG1_DIR_PATH}"
		mkdir -p "${SVG2_DIR_PATH}"

		# This one is needed only once since it is always the same
		if [[ "${i}" == "2" ]]; then

			pcb_layers=$(grep -P "^[ \t]+\([0-9][0-9]* " ${OUTPUT_DIR_PATH}/${commit_hash_1}/"${kicad_pcb_1}")
			layers_name=$(grep -P "^[ \t]+\([0-9][0-9]* " "${OUTPUT_DIR_PATH}/${commit_hash_1}/${kicad_pcb_1}" | sed "s/\"//g" | sed "s/^[ \t]\+//g" | cut -d" " -f2)

			for layer_name in ${layers_name[@]}; do

				layer_id=$(echo "${pcb_layers}" | grep "${layer_name}" | sed "s/[ \t]*(//g" | cut -d " " -f 1 | xargs printf "%02d")

				msg="# Plotting layout ${commit_hash_1}, ${kicad_pcb_1} - ${layer_name}"
				cmd="kicad-cli pcb export svg --page-size-mode 0 --black-and-white \"${OUTPUT_DIR_PATH}/${commit_hash_1}/${kicad_pcb_1}\" --output \"${SVG1_DIR_PATH}/layer-${layer_id}.svg\" --layers \"Edge.Cuts,${layer_name}\""
				end="${command_end}"
				cmd_run "${cmd}" "${msg}" "${end}"

			done
		fi

		pcb_layers=$(grep -P "^[ \t]+\([0-9][0-9]* " "${OUTPUT_DIR_PATH}/${commit_hash_2}/${kicad_pcb_2}")
		layers_name=$(grep -P "^[ \t]+\([0-9][0-9]* " "${OUTPUT_DIR_PATH}/${commit_hash_2}/${kicad_pcb_2}" | sed "s/\"//g" | sed "s/^[ \t]\+//g" | cut -d" " -f2)

		for layer_name in ${layers_name[@]}; do

			layer_id=$(echo "${pcb_layers}" | grep "${layer_name}" | sed "s/[ \t]*(//g" | cut -d " " -f 1 | xargs printf "%02d")

			msg="# Plotting layout ${commit_hash_2}, ${kicad_pcb_2} - ${layer_name}"
			cmd="kicad-cli pcb export svg --page-size-mode 0 --black-and-white \"${OUTPUT_DIR_PATH}/${commit_hash_2}/${kicad_pcb_2}\" --output \"${SVG2_DIR_PATH}/layer-${layer_id}.svg\" --layers \"Edge.Cuts,${layer_name}\""
			end="${command_end}"
			cmd_run "${cmd}" "${msg}" "${end}"

		done

	else

		if [[ ! "${KIDIFF_MISSING}" == 1 ]]; then

			local command_end="&> /dev/null"

			# verbose shows errors only
			if [[ "${VERBOSE}" == "1" ]]; then
				command_end="2>&1 >/dev/null"
			fi

			# debug shows the whole output
			if [[ "${DEBUG}" == "1" ]] || [[ "${DEBUG_KIDIFF}" == "1" ]]; then
				command_end=""
			fi

			# Kidiff does local diff using ${kicad_pcb} name, so update it here
			if [[ "${commit_hash_1}" == "_local_" ]]; then commit_hash_1="${kicad_pcb_1}"; fi
			if [[ "${commit_hash_2}" == "_local_" ]]; then commit_hash_2="${kicad_pcb_2}"; fi

			if [[ ${PAGE_FRAME} == "1" ]]; then
				page_frame_parameter="-f"
			fi

			msg="# Plotting layouts ${commit_hash_1}, ${commit_hash_2}"
			cmd="kidiff -k -n --webserver-disable -a ${commit_hash_1} -b ${commit_hash_2} -o \"${OUTPUT_DIR_PATH}\" ${page_frame_parameter} \"${kicad_pcb}\""
			end="${command_end}"
			cmd_run "${cmd}" "${msg}" "${end}"

			# Revert commits back to _local_ to finish the cleanup
			if [[ "${commit_hash_1}" == "${kicad_pcb_1}" ]]; then commit_hash_1="_local_"; fi
			if [[ "${commit_hash_2}" == "${kicad_pcb_2}" ]]; then commit_hash_2="_local_"; fi

			# mkdir -p "${OUTPUT_DIR_PATH}/${commit_hash_1}/_KIRI_/pcb/"
			# mkdir -p "${OUTPUT_DIR_PATH}/${commit_hash_2}/_KIRI_/pcb/"

			# Fix folder name, kidiff generates local instead of _local_
			if [[ -d "${OUTPUT_DIR_PATH}/local/" ]]; then
				if [[ -d "${OUTPUT_DIR_PATH}/_local_/" ]]; then
					mv "${OUTPUT_DIR_PATH}/local/"* "${OUTPUT_DIR_PATH}/_local_/" &> /dev/null
				fi
				rm -fr "${OUTPUT_DIR_PATH}/local" &> /dev/null
			fi

			# Rename files folowing format: layer-xx.svg
			rename "s|${kicad_project_name_1}-(\d+).svg$|layer-\1.svg|" "${OUTPUT_DIR_PATH}/${commit_hash_1}/pcb/"*.svg &> /dev/null
			rename "s|${kicad_project_name_2}-(\d+).svg$|layer-\1.svg|" "${OUTPUT_DIR_PATH}/${commit_hash_2}/pcb/"*.svg &> /dev/null

			# Move files
			mv -f "${OUTPUT_DIR_PATH}/${commit_hash_1}/pcb/" "${OUTPUT_DIR_PATH}/${commit_hash_1}/_KIRI_/" &> /dev/null
			mv -f "${OUTPUT_DIR_PATH}/${commit_hash_2}/pcb/" "${OUTPUT_DIR_PATH}/${commit_hash_2}/_KIRI_/" &> /dev/null
		fi
	fi

	if which svgo &> /dev/null; then
		if [[ -z ${DO_NOT_OPTIMIZE_SVG} ]]; then
			if [[ "${i}" == "2" ]]; then
				msg="# Optimizing svg for web, ${commit_hash_1}"
				cmd="optimize_svg_for_web ${OUTPUT_DIR_PATH}/${commit_hash_1}/_KIRI_/pcb"
				end="${command_end}"
				cmd_run "${cmd}" "${msg}" "${end}"
			fi
			msg="# Optimizing svg for web, ${commit_hash_2}"
			cmd="optimize_svg_for_web ${OUTPUT_DIR_PATH}/${commit_hash_2}/_KIRI_/pcb"
			end="${command_end}"
			cmd_run "${cmd}" "${msg}" "${end}"
		fi
	fi
}

generate_3dmodels()
{
	local commit_hash_1="${1}"
	local commit_hash_2="${2}"
	local kicad_pcb_1="${3}"
	local kicad_pcb_2="${4}"
	local kicad_project_name_1="${5}"
	local kicad_project_name_2="${6}"

	local command_end="&> /dev/null"

	# verbose shows errors only
	if [[ "${VERBOSE}" == "1" ]]; then
		command_end="2>&1 >/dev/null"
	fi

	# debug shows the whole output
	if [[ "${DEBUG}" == "1" ]]; then
		command_end=""
	fi

	if [[ ! -f $(which stp2gltf) ]]; then
		return
	fi

	end="${command_end}"

	mkdir -p "${OUTPUT_DIR_PATH}/${commit_hash_1}/_KIRI_/3d_model/"
	mkdir -p "${OUTPUT_DIR_PATH}/${commit_hash_2}/_KIRI_/3d_model/"

	# Export step, if missing
	if [[ ! -f "${OUTPUT_DIR_PATH}/${commit_hash_1}/${kicad_project_name_1}.step" ]]; then
		msg="# Exporting ${commit_hash_1} .kicad_pcb to .step"
		cmd="kicad-cli pcb export step --subst-models -f -o \"${OUTPUT_DIR_PATH}/${commit_hash_1}/_KIRI_/3d_model/${kicad_project_name_1}.step\" \"${kicad_pcb_1}\""
		cmd_run "${cmd}" "${msg}" "${end}"
	else
		# echo "${commit_hash_1}, 3D Model ${OUTPUT_DIR_PATH}/${commit_hash_1}/${kicad_project_name_1}.step found"
		cp -f "${OUTPUT_DIR_PATH}/${commit_hash_1}/${kicad_project_name_1}.step" "${OUTPUT_DIR_PATH}/${commit_hash_1}/_KIRI_/3d_model/"
	fi

	# Export step, if missing
	if [[ ! -f "${OUTPUT_DIR_PATH}/${commit_hash_2}/${kicad_project_name_2}.step" ]]; then
		msg="# Exporting ${commit_hash_2} .kicad_pcb to .step"
		cmd="kicad-cli pcb export step --subst-models -f -o \"${OUTPUT_DIR_PATH}/${commit_hash_2}/_KIRI_/3d_model/${kicad_project_name_2}.step\" \"${kicad_pcb_2}\""
		cmd_run "${cmd}" "${msg}" "${end}"
	else
		# echo "${commit_hash_2}, 3D Model ${OUTPUT_DIR_PATH}/${commit_hash_2}/${kicad_project_name_2}.step found"
		cp -f "${OUTPUT_DIR_PATH}/${commit_hash_2}/${kicad_project_name_2}.step" "${OUTPUT_DIR_PATH}/${commit_hash_2}/_KIRI_/3d_model/"
	fi

	# Convert step to to gltf
	if [[ -f "${OUTPUT_DIR_PATH}/${commit_hash_1}/_KIRI_/3d_model/${kicad_project_name_1}.step" ]] && [[ ! -f "${OUTPUT_DIR_PATH}/${commit_hash_1}/_KIRI_/3d_model/${kicad_project_name_1}.gltf" ]]; then
		cd "${OUTPUT_DIR_PATH}/${commit_hash_1}/_KIRI_/3d_model/"
		msg="# Converting ${commit_hash_1} 3D Model from .step to .gltf/.bin"
		cmd="stp2gltf ${kicad_project_name_1}.step ${kicad_project_name_1}.gltf ${kicad_project_name_1}.bin"
		cmd_run "${cmd}" "${msg}" "${end}"
		cd - &> /dev/null
	fi

	# Convert step to to gltf
	if [[ -f "${OUTPUT_DIR_PATH}/${commit_hash_2}/_KIRI_/3d_model/${kicad_project_name_2}.step" ]] && [[ ! -f "${OUTPUT_DIR_PATH}/${commit_hash_2}/_KIRI_/3d_model/${kicad_project_name_2}.gltf" ]]; then
		cd "${OUTPUT_DIR_PATH}/${commit_hash_2}/_KIRI_/3d_model/"
		msg="# Converting ${commit_hash_2} 3D Model from .step to .gltf/.bin"
		cmd="stp2gltf ${kicad_project_name_2}.step ${kicad_project_name_2}.gltf ${kicad_project_name_2}.bin"
		cmd_run "${cmd}" "${msg}" "${end}"
		cd - &> /dev/null
	fi
}

generate_diffs()
{
	local hashes
	local n_hashes
	local n_comparisons

	hashes=$(echo "${COMMITS}" | tac | cut -d' '  -f1 | tac);
	n_hashes=$(echo "${hashes}" | wc -w | sed "s/^[ \t]\+//g")
	# n_comparisons=$((n_hashes * $((n_hashes - 1))))
	n_comparisons=$(python3 -c "import math; print((int)(math.factorial(${n_hashes}) / (math.factorial(2) * math.factorial(${n_hashes} - 2))))")

	# Check for local changes
	echo -e "\n${LBL}Artifacts Summary${RCO}"
	if echo "${COMMITS}" | cut -d' '  -f1 | grep "_local_" -q; then
		if [[ $((n_hashes-1)) == 1 ]] ; then
			echo "$((n_hashes-1)) commit ${BTE}plus local changes${RCO} ($((n_comparisons)) comparisons)"
		else
			echo "$((n_hashes-1)) commits ${BTE}plus local changes${RCO} ($((n_comparisons)) comparisons)"
		fi
	else
		echo "${n_hashes} commits (${n_comparisons} comparisons)"
	fi

	echo -e "\n${LBL}Generating artifacts (may take some time)${RCO}"

	local i=0
	IFS=$'\n'
	for hash_1 in ${hashes}; do

		local j=0
		for hash_2 in ${hashes}; do

			if [[ "${hash_2}" != "${hash_1}" ]]; then

				i=$((i+1))
				j=$((j+1))

				if [[ -d "${OUTPUT_DIR_PATH}/${hash_2}" ]]; then
					continue
				fi

				if [[ "${VERBOSE}" == "1" ]] || [[ "${DEBUG}" == "1" ]]; then
					local padding=0
					local total="/${n_comparisons}"
				else
					local padding=$(($(python3 -c "import math; print(int(math.log10(${n_comparisons}))+1)")))
					local total=""
				fi

				if [[ "${j}" == "1" ]]; then

					commit_msg_1=$(echo "${COMMITS}" | grep "^${hash_1}")
					commit_msg_2=$(echo "${COMMITS}" | grep "^${hash_2}")

					if [[ "${VERBOSE}" == "1" ]] || [[ "${DEBUG}" == "1" ]]; then
						echo
						padlimit=$(tput cols)
						pad=$(printf '%*s' "${padlimit}")
						pad=${pad// /-}
						echo "${pad}"
						printf "\n${LGR}# %${padding}d${total} %s${RCO}" "${i}" "${commit_msg_1}" | cut -c -$(($(tput cols)-4))
						i=$((i+1))
						printf "${LGR}# %${padding}d${total} %s${RCO}\n" "${i}" "${commit_msg_2}" | cut -c -$(($(tput cols)-4))
					else
						printf "%${padding}d${total} %s" "${i}" "${commit_msg_1}" | cut -c -$(($(tput cols)-4))
						i=$((i+1))
						printf "%${padding}d${total} %s\n" "${i}" "${commit_msg_2}" | cut -c -$(($(tput cols)-4))
					fi

				else

					commit_msg=$(echo "${COMMITS}" | grep "^${hash_2}")

					if [[ "${VERBOSE}" == "1" ]] || [[ "${DEBUG}" == "1" ]]; then
						echo
						padlimit=$(tput cols)
						pad=$(printf '%*s' "${padlimit}")
						pad=${pad// /-}
						echo "${pad}"
						printf "\n${LGR}# %${padding}d${total} %s${RCO}\n" "${i}" "${commit_msg}" | cut -c -$(($(tput cols)-4))
					else
						printf "%${padding}d${total} %s\n" "${i}" "${commit_msg}" | cut -c -$(($(tput cols)-4))
					fi
				fi

				if [[ "${j}" == "1" ]]; then
					mkdir -p "${OUTPUT_DIR_PATH}/${hash_1}/"
					export_project_files "${hash_1}"
				fi
				mkdir -p "${OUTPUT_DIR_PATH}/${hash_2}/"
				export_project_files "${hash_2}"

				if [[ "${j}" == "1" ]]; then

					local kicad_pro_1="$(get_kicad_pro "${OUTPUT_DIR_PATH}/${hash_1}")"
					if [[ ! -f "${OUTPUT_DIR_PATH}/${hash_1}/${kicad_pro_1}" ]]; then
						continue;
					fi

					local kicad_pro_extension_1="$(get_file_extension "${kicad_pro_1}")"
					local kicad_project_name_1="$(get_file_without_extention "${kicad_pro_1}")"
					local kicad_sch_1="$(get_kicad_sch "${OUTPUT_DIR_PATH}/${hash_1}" "${kicad_project_name_1}" "${kicad_pro_extension_1}")"
					local kicad_pcb_1="$(get_kicad_pcb "${OUTPUT_DIR_PATH}/${hash_1}" "${kicad_project_name_1}")"
					local kicad_sch_pages_1="$(get_kicad_sch_pages "${OUTPUT_DIR_PATH}/${hash_1}/${kicad_sch_1}" ${hash_1})"
					local kicad_cache_lib_1="$(get_kicad_cache_lib "${OUTPUT_DIR_PATH}/${hash_1}" "${kicad_project_name_1}")"

					if [[ "${VERBOSE}" == "1" ]] || [[ "${DEBUG}" == "1" ]]; then
						echo
					fi

					show_project_files "${OUTPUT_DIR_PATH}/${hash_1}" "${kicad_pro_1}" "${kicad_sch_1}" "${kicad_pcb_1}" "${kicad_cache_lib_1}"
					create_project_info  "${hash_1}" "${OUTPUT_DIR_PATH}/${hash_1}/${kicad_pro_1}" "${OUTPUT_DIR_PATH}/${hash_1}/${kicad_sch_1}" "${OUTPUT_DIR_PATH}/${hash_1}/${kicad_pcb_1}"
					create_list_of_pages "${hash_1}" "${OUTPUT_DIR_PATH}/${hash_1}/${kicad_sch_1}"
					create_list_of_layers "${hash_1}" "${OUTPUT_DIR_PATH}/${hash_1}/${kicad_pcb_1}"

				fi

				local kicad_pro_2="$(get_kicad_pro "${OUTPUT_DIR_PATH}/${hash_2}")"
				if [[ ! -f "${OUTPUT_DIR_PATH}/${hash_2}/${kicad_pro_2}" ]]; then
					continue;
				fi

				local kicad_pro_extension_2="$(get_file_extension "${kicad_pro_2}")"
				local kicad_project_name_2="$(get_file_without_extention "${kicad_pro_2}")"
				local kicad_sch_2="$(get_kicad_sch "${OUTPUT_DIR_PATH}/${hash_2}" "${kicad_project_name_2}" "${kicad_pro_extension_2}")"
				local kicad_pcb_2="$(get_kicad_pcb "${OUTPUT_DIR_PATH}/${hash_2}" "${kicad_project_name_2}")"
				local kicad_sch_pages_2="$(get_kicad_sch_pages "${OUTPUT_DIR_PATH}/${hash_2}/${kicad_sch_2}" ${hash_2})"
				local kicad_cache_lib_2="$(get_kicad_cache_lib "${OUTPUT_DIR_PATH}/${hash_2}" "${kicad_project_name_2}")"

				if [[ "${VERBOSE}" == "1" ]] || [[ "${DEBUG}" == "1" ]]; then
					echo
				fi

				show_project_files "${OUTPUT_DIR_PATH}/${hash_2}" "${kicad_pro_2}" "${kicad_sch_2}" "${kicad_pcb_2}" "${kicad_cache_lib_2}"
				create_project_info "${hash_2}" "${OUTPUT_DIR_PATH}/${hash_2}/${kicad_pro_2}" "${OUTPUT_DIR_PATH}/${hash_2}/${kicad_sch_2}" "${OUTPUT_DIR_PATH}/${hash_2}/${kicad_pcb_2}"
				create_list_of_pages "${hash_2}" "${OUTPUT_DIR_PATH}/${hash_2}/${kicad_sch_2}"
				create_list_of_layers "${hash_2}" "${OUTPUT_DIR_PATH}/${hash_2}/${kicad_pcb_2}"

				generate_schematic_artifacts "${hash_1}" "${hash_2}" "${kicad_sch_1}" "${kicad_sch_2}" "${kicad_cache_lib_1}" "${kicad_cache_lib_2}" "${i}" "${kicad_project_name_1}" "${kicad_project_name_2}"
				generate_layout_artifacts "${hash_1}" "${hash_2}" "${kicad_pcb_1}" "${kicad_pcb_2}" "${kicad_project_name_1}" "${kicad_project_name_2}"

				if [[ -n ${SCH_SVG_VIEWBOX_XY} ]]; then
					update_svg_viewport "${hash_1}" "${hash_2}" "${i}" "sch"
				fi

				if [[ -n ${PCB_SVG_VIEWBOX_XY} ]]; then
					update_svg_viewport "${hash_1}" "${hash_2}" "${i}" "pcb"
				fi

				# generate_3dmodels "${hash_1}" "${hash_2}" "${kicad_pcb_1}" "${kicad_pcb_2}" "${kicad_project_name_1}" "${kicad_project_name_2}"
			fi
		done
	done
}

update_svg_viewport()
{
	local commit_hash_1="${1}"
	local commit_hash_2="${2}"
	local i="${3}"
	local view="${4}"

	if [[ ${view} == "sch" ]]; then
		x=$(echo ${SCH_SVG_VIEWBOX_XY} | cut -d, -f1)
		y=$(echo ${SCH_SVG_VIEWBOX_XY} | cut -d, -f2)
	else
		x=$(echo ${PCB_SVG_VIEWBOX_XY} | cut -d, -f1)
		y=$(echo ${PCB_SVG_VIEWBOX_XY} | cut -d, -f2)
	fi

	local command_end="> /dev/null"
	if [[ "${DEBUG}" == 1 ]]; then
		command_end=""
	fi

	# This one is needed only once since it is always the same
	if [[ "${i}" == "2" ]]; then
		find ".kiri/${commit_hash_1}/_KIRI_/${view}" -name "*.svg" -exec svg_tweaks {} ${x} ${y} \; > /dev/null
	fi

	find ".kiri/${commit_hash_2}/_KIRI_/${view}" -name "*.svg" -exec svg_tweaks {} ${x} ${y} \; > /dev/null
}

build_main_html()
{
	local kicad_pro="$(get_kicad_pro "${KICAD_PROJ_ABSOLUTE_PATH}")"
	local kicad_pro_extension="$(get_file_extension "${kicad_pro}")"
	local kicad_proj_name="$(get_file_without_extention "${kicad_pro}")"
	local kicad_sch="$(get_kicad_sch "${KICAD_PROJ_ABSOLUTE_PATH}" "${kicad_proj_name}" "${kicad_pro_extension}")"
	local kicad_pcb="$(get_kicad_pcb "${KICAD_PROJ_ABSOLUTE_PATH}" "${kicad_proj_name}")"
	local kicad_sch_pages="$(get_kicad_sch_pages "${KICAD_PROJ_ABSOLUTE_PATH}/${kicad_sch}")"
	local kicad_cache_lib="$(get_kicad_cache_lib "${KICAD_PROJ_ABSOLUTE_PATH}" "${kicad_proj_name}")"
	show_project_files "${KICAD_PROJ_ABSOLUTE_PATH}" "${kicad_pro}" "${kicad_sch}" "${kicad_pcb}" "${kicad_cache_lib}"

	mkdir -p "${WEB_DIR_PATH}/"

	# Remove Kidiff leftovers
	rm -rf "${WEB_DIR_PATH}/triptych"

	echo -e "\n${LBL}${LBL}Assembling the HTML${RCO}"

	# Copy assets
	main_html=index.html
	cp -f "${KIRI_HOME_PATH}/assets/${main_html}"  "${WEB_DIR_PATH}/"
	cp -f "${KIRI_HOME_PATH}/assets/kiri.js"       "${WEB_DIR_PATH}/"
	cp -f "${KIRI_HOME_PATH}/assets/kiri.css"      "${WEB_DIR_PATH}/"
	cp -f "${KIRI_HOME_PATH}/assets/blank.svg"     "${WEB_DIR_PATH}/"
	cp -f "${KIRI_HOME_PATH}/assets/favicon.ico"   "${WEB_DIR_PATH}/"
	cp -f "${KIRI_HOME_PATH}/assets/redirect.html" "${WEB_DIR_PATH}/../index.html"
	cp -f "${KIRI_HOME_PATH}/bin/kiri-server"      "${OUTPUT_DIR_PATH}/"

	# Testing
	cp -rf "${KIRI_HOME_PATH}/assets/gltfc"         "${WEB_DIR_PATH}/" &> /dev/null

	# Index of the initial commits (in the COMMITS list)
	commit1_i=0
	commit2_i=1

	# Select initial commits
	local commit_hash_1=$(echo "${COMMITS}" | head -n$((commit1_i + 1)) | tail -n1 | cut -d" " -f1)
	local commit_hash_2=$(echo "${COMMITS}" | head -n$((commit2_i + 1)) | tail -n1 | cut -d" " -f1)

	local sheets=$(create_unified_sheets_list)
	local layers=$(create_unified_layers_list)

	# Insert commits list
	echo "- Adding list of commits"
	insert_commits_html "${WEB_DIR_PATH}/${main_html}" "${commit1_i}" "${commit2_i}"

	# Insert pages list
	echo "- Adding list of pages"
	insert_pages_html "${WEB_DIR_PATH}/${main_html}" "${commit_hash_1}" "${commit_hash_2}"

	# Insert layers list
	echo "- Adding list of layers"
	insert_layers_html "${WEB_DIR_PATH}/${main_html}"

	echo -e "\n${LBL}${LBL}Latest rev ${commit_hash_1}${RCO}"

	# Set project title with kicad project folder name
	project_title=$(basename "${REPO_ABSOLUTE_PATH}")
	echo "- Project's title (folder name): ${BTE}${LBL}${project_title}${RCO}"
	sed -i "s|\[PROJECT_TITLE\]|${project_title}|g" "${WEB_DIR_PATH}/${main_html}"

	local _kicad_pro="$(get_kicad_pro ${OUTPUT_DIR_PATH}/${commit_hash_1}/*pro)"
	local _kicad_pro_extension="$(get_file_extension "${_kicad_pro}")"
	local _kicad_proj_name="$(get_file_without_extention "${_kicad_pro}")"
	local _kicad_sch="$(get_kicad_sch "${KICAD_PROJ_ABSOLUTE_PATH}" "${_kicad_proj_name}" "${_kicad_pro_extension}")"
	local _kicad_pcb="$(get_kicad_pcb "${KICAD_PROJ_ABSOLUTE_PATH}" "${_kicad_proj_name}")"

	# Set Kicad project's name
	echo "- Project's name (file name): ${BTE}${LBL}${_kicad_proj_name}${RCO}"
	sed -i "s|var board_name =.*|var board_name = \"${_kicad_proj_name}\"; // updated by kiri script|g" "${WEB_DIR_PATH}/kiri.js"

	# Set schematic and board titles
	# local sch_title=$(grep -i "title " "${_kicad_sch}" -m1 2> /dev/null | sed "s/^[ \t]\+//g" | cut -d" " -f 2- | sed "s/[)\"]//g")
	local sch_title=$(grep -i "title " -m1 "${_kicad_sch}" 2> /dev/null | sed "s/.*[Tt]itle //g" | cut -d")" -f1 | sed "s/\"//g")
	local sch_label="${sch_title}"
	# local pcb_title=$(grep -i "(title .*)" "${_kicad_pcb}" -m1 2> /dev/null | sed "s/^[ \t]\+//g" | cut -d" " -f 2- | sed "s/[)\"]//g")
	local pcb_title=$(grep -i "(title " -m1 "${_kicad_pcb}" 2> /dev/null | sed "s/.*title //g" | cut -d")" -f1 | sed "s/\"//g")
	local pcb_label="${pcb_title}"
	if [[ -z "${sch_title}" ]]; then sch_title="[title]"; sch_label="${BTE}${LRE}[missing]${RCO}"; fi
	if [[ -z "${pcb_title}" ]]; then pcb_title="[title]"; pcb_label="${BTE}${LRE}[missing]${RCO}"; fi
	echo "- Sch title: ${BTE}${LMA}${sch_label}${RCO}"
	echo "- PCB title: ${BTE}${LCY}${pcb_label}${RCO}"
	sed -i "s|\[SCH_TITLE\]|Sch \| ${sch_title}|g" "${WEB_DIR_PATH}/${main_html}"
	sed -i "s|\[PCB_TITLE\]|PCB \| ${pcb_title}|g" "${WEB_DIR_PATH}/${main_html}"

	# Set schematic and board revision
	# local sch_revision=$(grep -i "Rev" "${_kicad_sch}" -m1 2> /dev/null | sed "s/^[ \t]\+//g" | sed "s/[()]//g" | cut -d" " -f2- | sed "s/\"//g")
	local sch_revision=$(grep -i "rev " -m1 "${_kicad_sch}" 2> /dev/null | sed "s/.*[Rr]ev //g" | cut -d")" -f1 | sed "s/\"//g")
	local sch_label="${sch_revision}"
	# local pcb_revision=$(grep "(rev " "${_kicad_pcb}" -m1 2> /dev/null | sed "s/^[ \t]\+//g" | sed "s/[()]//g" | cut -d" " -f2- | sed "s/\"//g")
	local pcb_revision=$(grep -i "(rev " -m1 "${_kicad_pcb}" 2> /dev/null | sed "s/.*rev //g" | cut -d")" -f1 | sed "s/\"//g")
	local pcb_label="${pcb_revision}"
	if [[ -z "${pcb_revision}" ]]; then pcb_revision="[rev]"; pcb_label="${BTE}${LRE}[missing]${RCO}"; fi
	if [[ -z "${sch_revision}" ]]; then sch_revision="[rev]"; sch_label="${BTE}${LRE}[missing]${RCO}"; fi
	echo "- Sch revision: ${BTE}${LMA}${sch_label}${RCO}"
	echo "- PCB revision: ${BTE}${LCY}${pcb_label}${RCO}"
	sed -i "s|\[SCH_REVISION\]|${sch_revision}|g" "${WEB_DIR_PATH}/${main_html}"
	sed -i "s|\[PCB_REVISION\]|${pcb_revision}|g" "${WEB_DIR_PATH}/${main_html}"

	# Set schematic and board date
	local sch_date=$(grep -i "date" "${_kicad_sch}" -m1 2> /dev/null | sed "s/^[ \t]\+//g" | sed "s/[()]//g" | cut -d" " -f2 | sed "s/\"//g")
	local sch_label="${sch_date}"
	local pcb_date=$(grep "(date " "${_kicad_pcb}" -m1 2> /dev/null | sed "s/^[ \t]\+//g" | sed "s/[()]//g" | cut -d" " -f2 | sed "s/\"//g")
	local pcb_label="${pcb_date}"
	if [[ -z "${sch_date}" ]]; then sch_date="[date]"; sch_label="${BTE}${LRE}[missing]${RCO}"; fi
	if [[ -z "${pcb_date}" ]]; then pcb_date="[date]"; pcb_label="${BTE}${LRE}[missing]${RCO}"; fi
	echo "- Sch date: ${BTE}${LMA}${sch_label}${RCO}"
	echo "- PCB date: ${BTE}${LCY}${pcb_label}${RCO}"
	sed -i "s|\[PCB_DATE\]|${pcb_date}|g" "${WEB_DIR_PATH}/${main_html}"
	sed -i "s|\[SCH_DATE\]|${sch_date}|g" "${WEB_DIR_PATH}/${main_html}"

	# Initial Kicad project path
	local project_path_1="$(realpath --relative-to="${KICAD_PROJ_ABSOLUTE_PATH}" "${OUTPUT_DIR_PATH}/${commit_hash_1}/${kicad_proj_name}.${kicad_pro_extension}")"
	local project_path_2="$(realpath --relative-to="${KICAD_PROJ_ABSOLUTE_PATH}" "${OUTPUT_DIR_PATH}/${commit_hash_2}/${kicad_proj_name}.${kicad_pro_extension}")"
	echo -e "\n${LBL}${LBL}Kiri main page${RCO}"
	echo "- Initial project path:"
	echo "  Pro 1: ${BTE}${LMA}${project_path_1}${RCO}"
	echo "  Pro 2: ${BTE}${LCY}${project_path_2}${RCO}"
	sed -i "s|\[COMMIT_1_KICAD_PRO\]|${project_path_1}|g" "${WEB_DIR_PATH}/${main_html}"
	sed -i "s|\[COMMIT_2_KICAD_PRO\]|${project_path_2}|g" "${WEB_DIR_PATH}/${main_html}"

	# Change initial view to layout
	set_default_html_view "${kicad_sch}"
}

archive_kiri_website()
{
	# If directory exists and it is not empty
	if [[ -d "${OUTPUT_DIR_PATH}" ]] && [[ ! "$(ls -A "${OUTPUT_DIR_PATH}")" ]]; then
		local datetime=$(date +"%Y.%m.%d-%Hh%M")
		local package="$(basename "${OUTPUT_DIR_PATH}")-${datetime}.tgz"
		echo -e "${LBL}Archiving generated files in${RCO} ${package}"
		tar -cvzf "${package}" "${OUTPUT_DIR_PATH}" &> /dev/null
	fi
}

launch_webserver()
{
	if [[ "${START_SERVER}" != 0 ]]; then
		if [[ "${WEBSERVER_PORT}" != "" ]]; then
			local webserver_port_param="-p ${WEBSERVER_PORT}"
		fi
		if [[ ${LAUNCH_BROWSER} == 0 ]]; then
			server_only_flag="-S"
		fi
		if kiri-server -i "${IP_ADDRESS}" "${OUTPUT_DIR_PATH}" ${webserver_port_param} ${server_only_flag} 2> /dev/null; then
			pid=$!
			kill -9 ${pid} &> /dev/null
		else
			echo -e "Something went wrong with kiri-server, try to force the port with '-p'"
			exit 1
		fi
	fi
}

# ====================================================================================================
# ====================================================================================================
# ====================================================================================================

get_kicad_pro()
{
	local kicad_proj_path="${1}"

	local kicad_pro="$(find "${kicad_proj_path}" -maxdepth 1 -name "*.kicad_pro" | sed "/${KICAD_PRO_FIND_EXCLUDE_PATTERN}/d" | sort -n | head -n1)"
	if [[ -z "${kicad_pro}" ]]; then
		kicad_pro="$(find "${kicad_proj_path}" -maxdepth 1 -name "*.pro" | sed "/${KICAD_PRO_FIND_EXCLUDE_PATTERN}/d" | sort -n | head -n1)"
	fi

	basename "${kicad_pro}"
}

get_kicad_sch()
{
	local kicad_proj_path="${1}"
	local kicad_proj_name="${2}"
	local kicad_pro_extension="${3}"
	local kicad_sch
	case "${kicad_pro_extension}" in
		"pro")
			basename "$(find "${kicad_proj_path}" -maxdepth 1 -name "${kicad_proj_name}\.sch")"
			;;
		"kicad_pro")
			basename "$(find "${kicad_proj_path}" -maxdepth 1 -name "${kicad_proj_name}\.kicad_sch")"
			;;
	esac
}

get_kicad_sch_pages()
{
	# Parse a list of schematic pages from the main Kicad's schematic
	# Format: schematic_page_name|filename_without_extension

	local kicad_sch="${1}"
	local git_hash="${2}"

	local sch_extension="$(get_file_extension "${kicad_sch}")"

	if [[ -z "${git_hash}" ]] || [[ "${git_hash}" == "_local_" ]]; then
		git_hash="HEAD"
	fi

	case "${sch_extension}" in
		"sch")
			git ls-tree -r --name-only "${git_hash}" | grep "\.sch$" | sed "s|${kicad_sch}||g"
			;;
		"kicad_sch")
			git ls-tree -r --name-only "${git_hash}" | grep "\.kicad_sch$" | sed "s|${kicad_sch}||g"
			;;
	esac
}

get_kicad_cache_lib()
{
	local kicad_proj_path="${1}"
	local kicad_proj_name="${2}"
	basename "$(find "${kicad_proj_path}" -maxdepth 1 -name "${kicad_proj_name}-cache.lib")" 2> /dev/null
}

get_kicad_pcb()
{
	local kicad_proj_path="${1}"
	local kicad_proj_name="${2}"
	basename "$(find "${kicad_proj_path}" -maxdepth 1 -name "${kicad_proj_name}.kicad_pcb")" 2> /dev/null
}

show_project_files()
{
	local kicad_project_path="${1}"
	local kicad_pro="${2}"
	local kicad_sch="${3}"
	local kicad_pcb="${4}"
	local kicad_cache_lib="${5}"

	local kicad_sch_pages="$(get_kicad_sch_pages "${kicad_project_path}/${kicad_sch}")"
	local extra_kicad_sch_pages=$(echo "${kicad_sch_pages}" | sed "s/${kicad_sch}//g" | sed '/^[[:space:]]*$/d')

	indent=$(printf ' %.0s' {1..4})
	commit_hash=$(basename "${kicad_project_path}")
	if [[ ${commit_hash} == "." ]]; then
		commit_hash="local"
	fi

	if [[ "${VERBOSE}" == "1" ]] || [[ "${DEBUG}" == "1" ]]; then
		echo -e "${indent}${LCY}# Rev ${commit_hash} files${RCO}"
		echo "${indent}     project_path: ${kicad_project_path}"
		echo "${indent}          project: ${kicad_pro}"
		echo "${indent}        schematic: ${kicad_sch}"
		if [[ -n "${extra_kicad_sch_pages}" ]]; then
			padding=$(printf ' %.0s' {1..19})
			echo -e "${indent}  extra_sch_files: $(echo -e "${extra_kicad_sch_pages}" | sed "s/^/${indent}${padding}/g" | sed '1s/[ ]\+//')"
		fi
		if [[ -n "${kicad_cache_lib}" ]]; then
			echo -e "${indent}        cache.lib: ${kicad_cache_lib}"
		fi
		echo "${indent}           layout: ${kicad_pcb}"
		echo
	fi
}

show_main_global_variables()
{
	if [[ "${VERBOSE}" == 1 ]] || [[ "${DEBUG}" == 1 ]] || [[ "${DEBUG_KIDIFF}" == 1 ]] || [[ "${DEBUG_PLOTGITSCH}" == 1 ]]; then
		(
			echo
			echo "          KIRI_HOME_PATH = ${KIRI_HOME_PATH}"
			echo "           KICAD_VERSION = $(get_kicad_version)"
			echo "            CURRENT_PATH = ${KIRI_LAUNCH_PATH}"
			echo " KICAD_PRO_ABSOLUTE_PATH = ${KICAD_PRO_ABSOLUTE_PATH}"
			echo "      REPO_ABSOLUTE_PATH = ${REPO_ABSOLUTE_PATH}"
			echo "  KICAD_PROJ_NESTED_PATH = ${KICAD_PROJ_NESTED_PATH}"
			echo "KICAD_PROJ_ABSOLUTE_PATH = ${KICAD_PROJ_ABSOLUTE_PATH}"
			echo "         OUTPUT_DIR_PATH = ${OUTPUT_DIR_PATH}"
			echo "            WEB_DIR_PATH = ${WEB_DIR_PATH}"
			echo
		) | cut -c -$(($(tput cols)-3)) | sed "s/\(.\{$(($(tput cols)-3))\}\)/\1.../"
	fi
}

main()
{
	export GIT_PAGER=cat git diff

	export KIRI_PID="${$}"

	trap "exit 1" TERM
	trap cleanup_on_exit INT

	readonly KIRI_HOME_PATH="$(dirname "$(dirname "$(readlink -f "${0}")")")"

	check_required_tools

	shift
	command_line_parse "${@}"

	show_main_global_variables

	local kicad_pro="$(get_kicad_pro "${KICAD_PROJ_ABSOLUTE_PATH}")"
	local kicad_pro_extension="$(get_file_extension "${kicad_pro}")"
	local kicad_proj_name="$(get_file_without_extention "${kicad_pro}")"
	local kicad_sch="$(get_kicad_sch "${KICAD_PROJ_ABSOLUTE_PATH}" "${kicad_proj_name}" "${kicad_pro_extension}")"
	local kicad_pcb="$(get_kicad_pcb "${KICAD_PROJ_ABSOLUTE_PATH}" "${kicad_proj_name}")"
	local kicad_sch_pages="$(get_kicad_sch_pages "${KICAD_PROJ_ABSOLUTE_PATH}/${kicad_sch}")"
	local kicad_cache_lib="$(get_kicad_cache_lib "${KICAD_PROJ_ABSOLUTE_PATH}" "${kicad_proj_name}")"
	show_project_files "${KICAD_PROJ_ABSOLUTE_PATH}" "${kicad_pro}" "${kicad_sch}" "${kicad_pcb}" "${kicad_cache_lib}"

	rm -rf "${OUTPUT_DIR_PATH}/_local_"
	if [[ "${REMOVE_KIRI_FOLDER}" == 1 ]]; then
		echo -e "\n${LBL}Output folder:${RCO} $(realpath --relative-to="${KICAD_PROJ_ABSOLUTE_PATH}" "${OUTPUT_DIR_PATH}")"
		echo -e "${LRE}Removing leftovers from the previous run${RCO}"
		rm -rf "${OUTPUT_DIR_PATH}"
	fi

	get_git_commits_list "${kicad_pro}" "${kicad_sch}" "${kicad_pcb}" "${kicad_sch_pages}"
	generate_diffs
	build_main_html

	if [[ ${ARCHIVE_PROJECT} == 1 ]]; then
		archive_kiri_website
	fi

	launch_webserver
}

main "${0}" "${@}"
